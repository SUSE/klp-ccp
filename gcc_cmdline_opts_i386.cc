/*
 * Copyright (C) 2019  SUSE Software Solutions Germany GmbH
 *
 * This file is part of klp-ccp.
 *
 * klp-ccp is free software: you can redistribute it and/or modify it
 * under the terms of version 2 of the GNU General Public License as
 * published by the Free Software Foundation.
 *
 * klp-ccp is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with klp-ccp. If not, see <https://www.gnu.org/licenses/>.
 */

{
  "m128bit-long-double",
  gcc_cmdline_parser::option::comp_target,
  gcc_cmdline_parser::option::arg_none,
  .reject_negative = true,
},
{
  "m16",
  gcc_cmdline_parser::option::comp_target,
  gcc_cmdline_parser::option::arg_none,
  .reject_negative = true,
  .alias = {},
  .min_gcc_version = {4, 9, 0},
},
{
  "m32",
  gcc_cmdline_parser::option::comp_target,
  gcc_cmdline_parser::option::arg_none,
  .reject_negative = true,
},
{
  "m3dnow",
  gcc_cmdline_parser::option::comp_target,
  gcc_cmdline_parser::option::arg_none,
},
{
  "m3dnowa",
  gcc_cmdline_parser::option::comp_target,
  gcc_cmdline_parser::option::arg_none,
},
{
  "m64",
  gcc_cmdline_parser::option::comp_target,
  gcc_cmdline_parser::option::arg_none,
  .reject_negative = true,
},
{
  "m80387",
  gcc_cmdline_parser::option::comp_target,
  gcc_cmdline_parser::option::arg_none,
},
{
  "m8bit-idiv",
  gcc_cmdline_parser::option::comp_target,
  gcc_cmdline_parser::option::arg_none,
},
{
  "m96bit-long-double",
  gcc_cmdline_parser::option::comp_target,
  gcc_cmdline_parser::option::arg_none,
  .reject_negative = true,
},
{
  "mabi=",
  gcc_cmdline_parser::option::comp_target,
  gcc_cmdline_parser::option::arg_joined,
  .reject_negative = true,
},
{
  "mabm",
  gcc_cmdline_parser::option::comp_target,
  gcc_cmdline_parser::option::arg_none,
},
{
  "maccumulate-outgoing-args",
  gcc_cmdline_parser::option::comp_target,
  gcc_cmdline_parser::option::arg_none,
},
{
  "maddress-mode=",
  gcc_cmdline_parser::option::comp_target,
  gcc_cmdline_parser::option::arg_joined,
  .reject_negative = true,
},
{
  "madx",
  gcc_cmdline_parser::option::comp_target,
  gcc_cmdline_parser::option::arg_none,
},
{
  "maes",
  gcc_cmdline_parser::option::comp_target,
  gcc_cmdline_parser::option::arg_none,
},
{
  "malign-data=",
  gcc_cmdline_parser::option::comp_target,
  gcc_cmdline_parser::option::arg_joined,
  .reject_negative = true,
  .alias = {},
  .min_gcc_version = {5, 1, 0},
},
{
  "malign-double",
  gcc_cmdline_parser::option::comp_target,
  gcc_cmdline_parser::option::arg_none,
},
{
  "malign-functions=",
  gcc_cmdline_parser::option::comp_target,
  gcc_cmdline_parser::option::arg_joined,
  .reject_negative = true,
},
{
  "malign-jumps=",
  gcc_cmdline_parser::option::comp_target,
  gcc_cmdline_parser::option::arg_joined,
  .reject_negative = true,
},
{
  "malign-loops=",
  gcc_cmdline_parser::option::comp_target,
  gcc_cmdline_parser::option::arg_joined,
  .reject_negative = true,
},
{
  "malign-stringops",
  gcc_cmdline_parser::option::comp_target,
  gcc_cmdline_parser::option::arg_none,
  .reject_negative = true,
},
{
  "march=",
  gcc_cmdline_parser::option::comp_target,
  gcc_cmdline_parser::option::arg_joined,
  .reject_negative = true,
},
{
  "masm=",
  gcc_cmdline_parser::option::comp_target,
  gcc_cmdline_parser::option::arg_joined,
  .reject_negative = true,
},
{
  "mavx",
  gcc_cmdline_parser::option::comp_target,
  gcc_cmdline_parser::option::arg_none,
},
{
  "mavx2",
  gcc_cmdline_parser::option::comp_target,
  gcc_cmdline_parser::option::arg_none,
},
{
  "mavx256-split-unaligned-load",
  gcc_cmdline_parser::option::comp_target,
  gcc_cmdline_parser::option::arg_none,
},
{
  "mavx256-split-unaligned-store",
  gcc_cmdline_parser::option::comp_target,
  gcc_cmdline_parser::option::arg_none,
},
{
  "mavx5124fmaps",
  gcc_cmdline_parser::option::comp_target,
  gcc_cmdline_parser::option::arg_none,
  .reject_negative = false,
  .alias = {},
  .min_gcc_version = {7, 1, 0},
},
{
  "mavx5124vnniw",
  gcc_cmdline_parser::option::comp_target,
  gcc_cmdline_parser::option::arg_none,
  .reject_negative = false,
  .alias = {},
  .min_gcc_version = {7, 1, 0},
},
{
  "mavx512bitalg",
  gcc_cmdline_parser::option::comp_target,
  gcc_cmdline_parser::option::arg_none,
  .reject_negative = false,
  .alias = {},
  .min_gcc_version = {8, 1, 0},
},
{
  "mavx512bw",
  gcc_cmdline_parser::option::comp_target,
  gcc_cmdline_parser::option::arg_none,
  .reject_negative = false,
  .alias = {},
  .min_gcc_version = {5, 1, 0},
},
{
  "mavx512cd",
  gcc_cmdline_parser::option::comp_target,
  gcc_cmdline_parser::option::arg_none,
  .reject_negative = false,
  .alias = {},
  .min_gcc_version = {4, 9, 0},
},
{
  "mavx512dq",
  gcc_cmdline_parser::option::comp_target,
  gcc_cmdline_parser::option::arg_none,
  .reject_negative = false,
  .alias = {},
  .min_gcc_version = {5, 1, 0},
},
{
  "mavx512er",
  gcc_cmdline_parser::option::comp_target,
  gcc_cmdline_parser::option::arg_none,
  .reject_negative = false,
  .alias = {},
  .min_gcc_version = {4, 9, 0},
},
{
  "mavx512f",
  gcc_cmdline_parser::option::comp_target,
  gcc_cmdline_parser::option::arg_none,
  .reject_negative = false,
  .alias = {},
  .min_gcc_version = {4, 9, 0},
},
{
  "mavx512ifma",
  gcc_cmdline_parser::option::comp_target,
  gcc_cmdline_parser::option::arg_none,
  .reject_negative = false,
  .alias = {},
  .min_gcc_version = {5, 1, 0},
},
{
  "mavx512pf",
  gcc_cmdline_parser::option::comp_target,
  gcc_cmdline_parser::option::arg_none,
  .reject_negative = false,
  .alias = {},
  .min_gcc_version = {4, 9, 0},
},
{
  "mavx512vbmi",
  gcc_cmdline_parser::option::comp_target,
  gcc_cmdline_parser::option::arg_none,
  .reject_negative = false,
  .alias = {},
  .min_gcc_version = {5, 1, 0},
},
{
  "mavx512vbmi2",
  gcc_cmdline_parser::option::comp_target,
  gcc_cmdline_parser::option::arg_none,
  .reject_negative = false,
  .alias = {},
  .min_gcc_version = {8, 1, 0},
},
{
  "mavx512vl",
  gcc_cmdline_parser::option::comp_target,
  gcc_cmdline_parser::option::arg_none,
  .reject_negative = false,
  .alias = {},
  .min_gcc_version = {5, 1, 0},
},
{
  "mavx512vnni",
  gcc_cmdline_parser::option::comp_target,
  gcc_cmdline_parser::option::arg_none,
},
{
  "mavx512vpopcntdq",
  gcc_cmdline_parser::option::comp_target,
  gcc_cmdline_parser::option::arg_none,
  .reject_negative = false,
  .alias = {},
  .min_gcc_version = {7, 1, 0},
},
{
  "mbmi",
  gcc_cmdline_parser::option::comp_target,
  gcc_cmdline_parser::option::arg_none,
},
{
  "mbmi2",
  gcc_cmdline_parser::option::comp_target,
  gcc_cmdline_parser::option::arg_none,
},
{
  "mbranch-cost=",
  gcc_cmdline_parser::option::comp_target,
  gcc_cmdline_parser::option::arg_joined,
  .reject_negative = true,
},
{
  "mcall-ms2sysv-xlogues",
  gcc_cmdline_parser::option::comp_target,
  gcc_cmdline_parser::option::arg_none,
  .reject_negative = false,
  .alias = {},
  .min_gcc_version = {8, 1, 0},
},
{
  "mcet-switch",
  gcc_cmdline_parser::option::comp_target,
  gcc_cmdline_parser::option::arg_none,
  .reject_negative = false,
  .alias = {},
  .min_gcc_version = {8, 1, 0},
},
{
  "mcld",
  gcc_cmdline_parser::option::comp_target,
  gcc_cmdline_parser::option::arg_none,
},
{
  "mcldemote",
  gcc_cmdline_parser::option::comp_target,
  gcc_cmdline_parser::option::arg_none,
  .reject_negative = false,
  .alias = {},
  .min_gcc_version = {9, 1, 0},
},
{
  "mclflushopt",
  gcc_cmdline_parser::option::comp_target,
  gcc_cmdline_parser::option::arg_none,
  .reject_negative = false,
  .alias = {},
  .min_gcc_version = {5, 1, 0},
},
{
  "mclwb",
  gcc_cmdline_parser::option::comp_target,
  gcc_cmdline_parser::option::arg_none,
  .reject_negative = false,
  .alias = {},
  .min_gcc_version = {5, 1, 0},
},
{
  "mclzero",
  gcc_cmdline_parser::option::comp_target,
  gcc_cmdline_parser::option::arg_none,
  .reject_negative = false,
  .alias = {},
  .min_gcc_version = {6, 1, 0},
},
{
  "mcmodel=",
  gcc_cmdline_parser::option::comp_target,
  gcc_cmdline_parser::option::arg_joined,
  .reject_negative = true,
},
{
  "mcpu=",
  gcc_cmdline_parser::option::comp_target,
  gcc_cmdline_parser::option::arg_joined,
  .reject_negative = true,
  .alias = { "mtune=" },
},
{
  "mcrc32",
  gcc_cmdline_parser::option::comp_target,
  gcc_cmdline_parser::option::arg_none,
},
{
  "mcx16",
  gcc_cmdline_parser::option::comp_target,
  gcc_cmdline_parser::option::arg_none,
},
{
  "mdispatch-scheduler",
  gcc_cmdline_parser::option::comp_target,
  gcc_cmdline_parser::option::arg_none,
  .reject_negative = true,
},
{
  "mdump-tune-features",
  gcc_cmdline_parser::option::comp_target,
  gcc_cmdline_parser::option::arg_none,
  .reject_negative = true,
  .alias = {},
  .min_gcc_version = {4, 9, 0},
},
{
  "mf16c",
  gcc_cmdline_parser::option::comp_target,
  gcc_cmdline_parser::option::arg_none,
},
{
  "mfancy-math-387",
  gcc_cmdline_parser::option::comp_target,
  gcc_cmdline_parser::option::arg_none,
  .reject_negative = true,
},
{
  "mfentry",
  gcc_cmdline_parser::option::comp_target,
  gcc_cmdline_parser::option::arg_none,
},
{
  "mfentry-name=",
  gcc_cmdline_parser::option::comp_target,
  gcc_cmdline_parser::option::arg_joined,
  .reject_negative = true,
  .alias = {},
  .min_gcc_version = {9, 1, 0},
},
{
  "mfentry-section=",
  gcc_cmdline_parser::option::comp_target,
  gcc_cmdline_parser::option::arg_joined,
  .reject_negative = true,
  .alias = {},
  .min_gcc_version = {9, 1, 0},
},
{
  "mfma",
  gcc_cmdline_parser::option::comp_target,
  gcc_cmdline_parser::option::arg_none,
},
{
  "mfma4",
  gcc_cmdline_parser::option::comp_target,
  gcc_cmdline_parser::option::arg_none,
},
{
  "mforce-drap",
  gcc_cmdline_parser::option::comp_target,
  gcc_cmdline_parser::option::arg_none,
},
{
  "mforce-indirect-call",
  gcc_cmdline_parser::option::comp_target,
  gcc_cmdline_parser::option::arg_none,
  .reject_negative = false,
  .alias = {},
  .min_gcc_version = {8, 1, 0},
},
{
  "mfp-ret-in-387",
  gcc_cmdline_parser::option::comp_target,
  gcc_cmdline_parser::option::arg_none,
},
{
  "mfpmath=",
  gcc_cmdline_parser::option::comp_target,
  gcc_cmdline_parser::option::arg_joined,
  .reject_negative = true,
},
{
  "mfsgsbase",
  gcc_cmdline_parser::option::comp_target,
  gcc_cmdline_parser::option::arg_none,
},
{
  "mfunction-return=",
  gcc_cmdline_parser::option::comp_target,
  gcc_cmdline_parser::option::arg_joined,
  .reject_negative = true,
  .alias = {},
  .min_gcc_version = {6, 5, 0},
  .max_gcc_version = {6, 5, std::numeric_limits<unsigned int>::max()},
},
{
  "mfunction-return=",
  gcc_cmdline_parser::option::comp_target,
  gcc_cmdline_parser::option::arg_joined,
  .reject_negative = true,
  .alias = {},
  .min_gcc_version = {7, 3, 0},
},
{
  "mfxsr",
  gcc_cmdline_parser::option::comp_target,
  gcc_cmdline_parser::option::arg_none,
},
{
  "mgeneral-regs-only",
  gcc_cmdline_parser::option::comp_target,
  gcc_cmdline_parser::option::arg_none,
  .reject_negative = true,
  .alias = {},
  .min_gcc_version = {7, 1, 0},
},
{
  "mgfni",
  gcc_cmdline_parser::option::comp_target,
  gcc_cmdline_parser::option::arg_none,
  .reject_negative = false,
  .alias = {},
  .min_gcc_version = {8, 1, 0},
},
{
  "mhard-float",
  gcc_cmdline_parser::option::comp_target,
  gcc_cmdline_parser::option::arg_none,
  .reject_negative = true,
},
{
  "mhle",
  gcc_cmdline_parser::option::comp_target,
  gcc_cmdline_parser::option::arg_none,
},
{
  "miamcu",
  gcc_cmdline_parser::option::comp_target,
  gcc_cmdline_parser::option::arg_none,
  .reject_negative = false,
  .alias = {},
  .min_gcc_version = {6, 1, 0},
},
{
  "mieee-fp",
  gcc_cmdline_parser::option::comp_target,
  gcc_cmdline_parser::option::arg_none,
},
{
  "mincoming-stack-boundary=",
  gcc_cmdline_parser::option::comp_target,
  gcc_cmdline_parser::option::arg_joined,
  .reject_negative = true,
},
{
  "mindirect-branch-register",
  gcc_cmdline_parser::option::comp_target,
  gcc_cmdline_parser::option::arg_none,
  .reject_negative = false,
  .alias = {},
  .min_gcc_version = {6, 5, 0},
  .max_gcc_version = {6, 5, std::numeric_limits<unsigned int>::max()},
},
{
  "mindirect-branch-register",
  gcc_cmdline_parser::option::comp_target,
  gcc_cmdline_parser::option::arg_none,
  .reject_negative = false,
  .alias = {},
  .min_gcc_version = {7, 3, 0},
},
{
  "mindirect-branch=",
  gcc_cmdline_parser::option::comp_target,
  gcc_cmdline_parser::option::arg_joined,
  .reject_negative = true,
  .alias = {},
  .min_gcc_version = {6, 5, 0},
  .max_gcc_version = {6, 5, std::numeric_limits<unsigned int>::max()},
},
{
  "mindirect-branch=",
  gcc_cmdline_parser::option::comp_target,
  gcc_cmdline_parser::option::arg_joined,
  .reject_negative = true,
  .alias = {},
  .min_gcc_version = {7, 3, 0},
},
{
  "minline-all-stringops",
  gcc_cmdline_parser::option::comp_target,
  gcc_cmdline_parser::option::arg_none,
},
{
  "minline-stringops-dynamically",
  gcc_cmdline_parser::option::comp_target,
  gcc_cmdline_parser::option::arg_none,
},
{
  "minstrument-return=",
  gcc_cmdline_parser::option::comp_target,
  gcc_cmdline_parser::option::arg_joined,
  .reject_negative = true,
  .alias = {},
  .min_gcc_version = {9, 1, 0},
},
{
  "mintel-syntax",
  gcc_cmdline_parser::option::comp_target,
  gcc_cmdline_parser::option::arg_none,
  .reject_negative = false,
  .alias = { "masm=", "intel", "att" },
},
{
  "mlarge-data-threshold=",
  gcc_cmdline_parser::option::comp_target,
  gcc_cmdline_parser::option::arg_joined,
  .reject_negative = true,
},
{
  "mlong-double-128",
  gcc_cmdline_parser::option::comp_target,
  gcc_cmdline_parser::option::arg_none,
  .reject_negative = true,
  .alias = {},
  .min_gcc_version = {4, 9, 0},
},
{
  "mlong-double-64",
  gcc_cmdline_parser::option::comp_target,
  gcc_cmdline_parser::option::arg_none,
  .reject_negative = true,
},
{
  "mlong-double-80",
  gcc_cmdline_parser::option::comp_target,
  gcc_cmdline_parser::option::arg_none,
  .reject_negative = true,
},
{
  "mlwp",
  gcc_cmdline_parser::option::comp_target,
  gcc_cmdline_parser::option::arg_none,
},
{
  "mlzcnt",
  gcc_cmdline_parser::option::comp_target,
  gcc_cmdline_parser::option::arg_none,
},
{
  "mmanual-endbr",
  gcc_cmdline_parser::option::comp_target,
  gcc_cmdline_parser::option::arg_none,
  .reject_negative = false,
  .alias = {},
  .min_gcc_version = {9, 1, 0},
},
{
  "mmemcpy-strategy=",
  gcc_cmdline_parser::option::comp_target,
  gcc_cmdline_parser::option::arg_joined,
  .reject_negative = true,
  .alias = {},
  .min_gcc_version = {4, 9, 0},
},
{
  "mmemset-strategy=",
  gcc_cmdline_parser::option::comp_target,
  gcc_cmdline_parser::option::arg_joined,
  .reject_negative = true,
  .alias = {},
  .min_gcc_version = {4, 9, 0},
},
{
  "mmitigate-rop",
  gcc_cmdline_parser::option::comp_target,
  gcc_cmdline_parser::option::arg_none,
  .reject_negative = false,
  .alias = {},
  .min_gcc_version = {6, 1, 0},
},
{
  "mmmx",
  gcc_cmdline_parser::option::comp_target,
  gcc_cmdline_parser::option::arg_none,
},
{
  "mmovbe",
  gcc_cmdline_parser::option::comp_target,
  gcc_cmdline_parser::option::arg_none,
},
{
  "mmovdir64b",
  gcc_cmdline_parser::option::comp_target,
  gcc_cmdline_parser::option::arg_none,
  .reject_negative = false,
  .alias = {},
  .min_gcc_version = {8, 1, 0},
},
{
  "mmovdiri",
  gcc_cmdline_parser::option::comp_target,
  gcc_cmdline_parser::option::arg_none,
  .reject_negative = false,
  .alias = {},
  .min_gcc_version = {8, 1, 0},
},
{
  "mmpx",
  gcc_cmdline_parser::option::comp_target,
  gcc_cmdline_parser::option::arg_none,
  .reject_negative = false,
  .alias = {},
  .min_gcc_version = {5, 1, 0},
},
{
  "mms-bitfields",
  gcc_cmdline_parser::option::comp_target,
  gcc_cmdline_parser::option::arg_none,
},
{
  "mmwaitx",
  gcc_cmdline_parser::option::comp_target,
  gcc_cmdline_parser::option::arg_none,
  .reject_negative = false,
  .alias = {},
  .min_gcc_version = {5, 2, 0},
},
{
  "mno-align-stringops",
  gcc_cmdline_parser::option::comp_target,
  gcc_cmdline_parser::option::arg_none,
  .reject_negative = true,
},
{
  "mno-default",
  gcc_cmdline_parser::option::comp_target,
  gcc_cmdline_parser::option::arg_none,
  .reject_negative = true,
  .alias = {},
  .min_gcc_version = {4, 9, 0},
},
{
  "mno-fancy-math-387",
  gcc_cmdline_parser::option::comp_target,
  gcc_cmdline_parser::option::arg_none,
  .reject_negative = true,
},
{
  "mno-push-args",
  gcc_cmdline_parser::option::comp_target,
  gcc_cmdline_parser::option::arg_none,
  .reject_negative = true,
},
{
  "mno-red-zone",
  gcc_cmdline_parser::option::comp_target,
  gcc_cmdline_parser::option::arg_none,
  .reject_negative = true,
},
{
  "mno-sse4",
  gcc_cmdline_parser::option::comp_target,
  gcc_cmdline_parser::option::arg_none,
  .reject_negative = true,
},
{
  "mnop-mcount",
  gcc_cmdline_parser::option::comp_target,
  gcc_cmdline_parser::option::arg_none,
  .reject_negative = false,
  .alias = {},
  .min_gcc_version = {5, 1, 0},
},
{
  "momit-leaf-frame-pointer",
  gcc_cmdline_parser::option::comp_target,
  gcc_cmdline_parser::option::arg_none,
},
{
  "mpc32",
  gcc_cmdline_parser::option::comp_target,
  gcc_cmdline_parser::option::arg_none,
  .reject_negative = true,
},
{
  "mpc64",
  gcc_cmdline_parser::option::comp_target,
  gcc_cmdline_parser::option::arg_none,
  .reject_negative = true,
},
{
  "mpc80",
  gcc_cmdline_parser::option::comp_target,
  gcc_cmdline_parser::option::arg_none,
  .reject_negative = true,
},
{
  "mpclmul",
  gcc_cmdline_parser::option::comp_target,
  gcc_cmdline_parser::option::arg_none,
},
{
  "mpcommit",
  gcc_cmdline_parser::option::comp_target,
  gcc_cmdline_parser::option::arg_none,
  .reject_negative = false,
  .alias = {},
  .min_gcc_version = {5, 1, 0},
},
{
  "mpconfig",
  gcc_cmdline_parser::option::comp_target,
  gcc_cmdline_parser::option::arg_none,
  .reject_negative = false,
  .alias = {},
  .min_gcc_version = {8, 1, 0},
},
{
  "mpku",
  gcc_cmdline_parser::option::comp_target,
  gcc_cmdline_parser::option::arg_none,
  .reject_negative = false,
  .alias = {},
  .min_gcc_version = {6, 1, 0},
},
{
  "mpopcnt",
  gcc_cmdline_parser::option::comp_target,
  gcc_cmdline_parser::option::arg_none,
},
{
  "mprefer-avx128",
  gcc_cmdline_parser::option::comp_target,
  gcc_cmdline_parser::option::arg_none,
  .reject_negative = false,
  .alias = {},
  .min_gcc_version = {},
  .max_gcc_version = {7, 4, std::numeric_limits<unsigned int>::max()},
},
{
  "mprefer-avx128",
  gcc_cmdline_parser::option::comp_target,
  gcc_cmdline_parser::option::arg_none,
  .reject_negative = false,
  .alias = { "mprefer-vector-width=", "128", "256" },
  .min_gcc_version = {8, 1, 0},
},
{
  "mprefer-vector-width=",
  gcc_cmdline_parser::option::comp_target,
  gcc_cmdline_parser::option::arg_joined,
  .reject_negative = true,
  .alias = {},
  .min_gcc_version = {8, 1, 0},
},
{
  "mpreferred-stack-boundary=",
  gcc_cmdline_parser::option::comp_target,
  gcc_cmdline_parser::option::arg_joined,
  .reject_negative = true,
},
{
  "mprefetchwt1",
  gcc_cmdline_parser::option::comp_target,
  gcc_cmdline_parser::option::arg_none,
  .reject_negative = false,
  .alias = {},
  .min_gcc_version = {4, 9, 0},
},
{
  "mprfchw",
  gcc_cmdline_parser::option::comp_target,
  gcc_cmdline_parser::option::arg_none,
},
{
  "mptwrite",
  gcc_cmdline_parser::option::comp_target,
  gcc_cmdline_parser::option::arg_none,
  .reject_negative = false,
  .alias = {},
  .min_gcc_version = {9, 1, 0},
},
{
  "mpush-args",
  gcc_cmdline_parser::option::comp_target,
  gcc_cmdline_parser::option::arg_none,
},
{
  "mrdpid",
  gcc_cmdline_parser::option::comp_target,
  gcc_cmdline_parser::option::arg_none,
  .reject_negative = false,
  .alias = {},
  .min_gcc_version = {7, 1, 0},
},
{
  "mrdrnd",
  gcc_cmdline_parser::option::comp_target,
  gcc_cmdline_parser::option::arg_none,
},
{
  "mrdseed",
  gcc_cmdline_parser::option::comp_target,
  gcc_cmdline_parser::option::arg_none,
},
{
  "mrecip",
  gcc_cmdline_parser::option::comp_target,
  gcc_cmdline_parser::option::arg_none,
},
{
  "mrecip=",
  gcc_cmdline_parser::option::comp_target,
  gcc_cmdline_parser::option::arg_joined,
  .reject_negative = true,
},
{
  "mrecord-mcount",
  gcc_cmdline_parser::option::comp_target,
  gcc_cmdline_parser::option::arg_none,
  .reject_negative = false,
  .alias = {},
  .min_gcc_version = {5, 1, 0},
},
{
  "mrecord-return",
  gcc_cmdline_parser::option::comp_target,
  gcc_cmdline_parser::option::arg_none,
  .reject_negative = false,
  .alias = {},
  .min_gcc_version = {9, 1, 0},
},
{
  "mred-zone",
  gcc_cmdline_parser::option::comp_target,
  gcc_cmdline_parser::option::arg_none,
  .reject_negative = true,
},
{
  "mregparm=",
  gcc_cmdline_parser::option::comp_target,
  gcc_cmdline_parser::option::arg_joined,
  .reject_negative = true,
},
{
  "mrtd",
  gcc_cmdline_parser::option::comp_target,
  gcc_cmdline_parser::option::arg_none,
},
{
  "mrtm",
  gcc_cmdline_parser::option::comp_target,
  gcc_cmdline_parser::option::arg_none,
},
{
  "msahf",
  gcc_cmdline_parser::option::comp_target,
  gcc_cmdline_parser::option::arg_none,
},
{
  "msgx",
  gcc_cmdline_parser::option::comp_target,
  gcc_cmdline_parser::option::arg_none,
  .reject_negative = false,
  .alias = {},
  .min_gcc_version = {7, 1, 0},
},
{
  "msha",
  gcc_cmdline_parser::option::comp_target,
  gcc_cmdline_parser::option::arg_none,
  .reject_negative = false,
  .alias = {},
  .min_gcc_version = {4, 9, 0},
},
{
  "mshstk",
  gcc_cmdline_parser::option::comp_target,
  gcc_cmdline_parser::option::arg_none,
  .reject_negative = false,
  .alias = {},
  .min_gcc_version = {8, 1, 0},
},
{
  "mskip-rax-setup",
  gcc_cmdline_parser::option::comp_target,
  gcc_cmdline_parser::option::arg_none,
  .reject_negative = false,
  .alias = {},
  .min_gcc_version = {5, 1, 0},
},
{
  "msoft-float",
  gcc_cmdline_parser::option::comp_target,
  gcc_cmdline_parser::option::arg_none,
},
{
  "msse",
  gcc_cmdline_parser::option::comp_target,
  gcc_cmdline_parser::option::arg_none,
},
{
  "msse2",
  gcc_cmdline_parser::option::comp_target,
  gcc_cmdline_parser::option::arg_none,
},
{
  "msse2avx",
  gcc_cmdline_parser::option::comp_target,
  gcc_cmdline_parser::option::arg_none,
},
{
  "msse3",
  gcc_cmdline_parser::option::comp_target,
  gcc_cmdline_parser::option::arg_none,
},
{
  "msse4",
  gcc_cmdline_parser::option::comp_target,
  gcc_cmdline_parser::option::arg_none,
  .reject_negative = true,
},
{
  "msse4.1",
  gcc_cmdline_parser::option::comp_target,
  gcc_cmdline_parser::option::arg_none,
},
{
  "msse4.2",
  gcc_cmdline_parser::option::comp_target,
  gcc_cmdline_parser::option::arg_none,
},
{
  "msse4a",
  gcc_cmdline_parser::option::comp_target,
  gcc_cmdline_parser::option::arg_none,
},
{
  "msse5",
  gcc_cmdline_parser::option::comp_target,
  gcc_cmdline_parser::option::arg_none,
  .reject_negative = false,
  .alias = { "mavx" },
},
{
  "msseregparm",
  gcc_cmdline_parser::option::comp_target,
  gcc_cmdline_parser::option::arg_none,
  .reject_negative = true,
},
{
  "mssse3",
  gcc_cmdline_parser::option::comp_target,
  gcc_cmdline_parser::option::arg_none,
},
{
  "mstack-arg-probe",
  gcc_cmdline_parser::option::comp_target,
  gcc_cmdline_parser::option::arg_none,
},
{
  "mstack-protector-guard-offset=",
  gcc_cmdline_parser::option::comp_target,
  gcc_cmdline_parser::option::arg_joined,
  .reject_negative = true,
  .alias = {},
  .min_gcc_version = {8, 1, 0},
},
{
  "mstack-protector-guard-reg=",
  gcc_cmdline_parser::option::comp_target,
  gcc_cmdline_parser::option::arg_joined,
  .reject_negative = true,
  .alias = {},
  .min_gcc_version = {8, 1, 0},
},
{
  "mstack-protector-guard-symbol=",
  gcc_cmdline_parser::option::comp_target,
  gcc_cmdline_parser::option::arg_joined,
  .reject_negative = true,
  .alias = {},
  .min_gcc_version = {8, 1, 0},
},
{
  "mstack-protector-guard=",
  gcc_cmdline_parser::option::comp_target,
  gcc_cmdline_parser::option::arg_joined,
  .reject_negative = true,
  .alias = {},
  .min_gcc_version = {4, 9, 0},
},
{
  "mstackrealign",
  gcc_cmdline_parser::option::comp_target,
  gcc_cmdline_parser::option::arg_none,
},
{
  "mstringop-strategy=",
  gcc_cmdline_parser::option::comp_target,
  gcc_cmdline_parser::option::arg_joined,
  .reject_negative = true,
},
{
  "mstv",
  gcc_cmdline_parser::option::comp_target,
  gcc_cmdline_parser::option::arg_none,
  .reject_negative = false,
  .alias = {},
  .min_gcc_version = {6, 1, 0},
},
{
  "mtbm",
  gcc_cmdline_parser::option::comp_target,
  gcc_cmdline_parser::option::arg_none,
},
{
  "mtls-dialect=",
  gcc_cmdline_parser::option::comp_target,
  gcc_cmdline_parser::option::arg_joined,
  .reject_negative = true,
},
{
  "mtls-direct-seg-refs",
  gcc_cmdline_parser::option::comp_target,
  gcc_cmdline_parser::option::arg_none,
},
{
  "mtune-ctrl=",
  gcc_cmdline_parser::option::comp_target,
  gcc_cmdline_parser::option::arg_joined,
  .reject_negative = true,
  .alias = {},
  .min_gcc_version = {4, 9, 0},
},
{
  "mtune=",
  gcc_cmdline_parser::option::comp_target,
  gcc_cmdline_parser::option::arg_joined,
  .reject_negative = true,
},
{
  "mvaes",
  gcc_cmdline_parser::option::comp_target,
  gcc_cmdline_parser::option::arg_none,
  .reject_negative = false,
  .alias = {},
  .min_gcc_version = {8, 1, 0},
},
{
  "mveclibabi=",
  gcc_cmdline_parser::option::comp_target,
  gcc_cmdline_parser::option::arg_joined,
  .reject_negative = true,
},
{
  "mvect8-ret-in-mem",
  gcc_cmdline_parser::option::comp_target,
  gcc_cmdline_parser::option::arg_none,
},
{
  "mvpclmulqdq",
  gcc_cmdline_parser::option::comp_target,
  gcc_cmdline_parser::option::arg_none,
  .reject_negative = false,
  .alias = {},
  .min_gcc_version = {8, 1, 0},
},
{
  "mvzeroupper",
  gcc_cmdline_parser::option::comp_target,
  gcc_cmdline_parser::option::arg_none,
},
{
  "mwaitpkg",
  gcc_cmdline_parser::option::comp_target,
  gcc_cmdline_parser::option::arg_none,
  .reject_negative = false,
  .alias = {},
  .min_gcc_version = {9, 1, 0},
},
{
  "mwbnoinvd",
  gcc_cmdline_parser::option::comp_target,
  gcc_cmdline_parser::option::arg_none,
},
{
  "mx32",
  gcc_cmdline_parser::option::comp_target,
  gcc_cmdline_parser::option::arg_none,
  .reject_negative = true,
},
{
  "mxop",
  gcc_cmdline_parser::option::comp_target,
  gcc_cmdline_parser::option::arg_none,
},
{
  "mxsave",
  gcc_cmdline_parser::option::comp_target,
  gcc_cmdline_parser::option::arg_none,
},
{
  "mxsavec",
  gcc_cmdline_parser::option::comp_target,
  gcc_cmdline_parser::option::arg_none,
  .reject_negative = false,
  .alias = {},
  .min_gcc_version = {5, 1, 0},
},
{
  "mxsaveopt",
  gcc_cmdline_parser::option::comp_target,
  gcc_cmdline_parser::option::arg_none,
},
{
  "mxsaves",
  gcc_cmdline_parser::option::comp_target,
  gcc_cmdline_parser::option::arg_none,
  .reject_negative = false,
  .alias = {},
  .min_gcc_version = {5, 1, 0},
},
