/*
 * Copyright (C) 2019  SUSE Software Solutions Germany GmbH
 *
 * This file is part of klp-ccp.
 *
 * klp-ccp is free software: you can redistribute it and/or modify it
 * under the terms of version 2 of the GNU General Public License as
 * published by the Free Software Foundation.
 *
 * klp-ccp is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with klp-ccp. If not, see <https://www.gnu.org/licenses/>.
 */

{
  .name = "m128bit-long-double",
  .code = opt_code_i386_m128bit_long_double,
  .comp = gcc_cmdline_parser::option::comp_target,
  .arg = gcc_cmdline_parser::option::arg_none,
  .reject_negative = true,
},
{
  .name = "m16",
  .code = opt_code_i386_m16,
  .comp = gcc_cmdline_parser::option::comp_target,
  .arg = gcc_cmdline_parser::option::arg_none,
  .reject_negative = true,
  .alias = {},
  .negative = "m32",
  .min_gcc_version = {4, 9, 0},
},
{
  .name = "m32",
  .code = opt_code_i386_m32,
  .comp = gcc_cmdline_parser::option::comp_target,
  .arg = gcc_cmdline_parser::option::arg_none,
  .reject_negative = true,
  .alias = {},
  .negative = "m64",
},
{
  .name = "m3dnow",
  .code = opt_code_i386_m3dnow,
  .comp = gcc_cmdline_parser::option::comp_target,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "m3dnowa",
  .code = opt_code_i386_m3dnowa,
  .comp = gcc_cmdline_parser::option::comp_target,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "m64",
  .code = opt_code_i386_m64,
  .comp = gcc_cmdline_parser::option::comp_target,
  .arg = gcc_cmdline_parser::option::arg_none,
  .reject_negative = true,
  .alias = {},
  .negative = "mx32",
},
{
  .name = "m80387",
  .code = opt_code_i386_m80387,
  .comp = gcc_cmdline_parser::option::comp_target,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "m8bit-idiv",
  .code = opt_code_i386_m8bit_idiv,
  .comp = gcc_cmdline_parser::option::comp_target,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "m96bit-long-double",
  .code = opt_code_i386_m96bit_long_double,
  .comp = gcc_cmdline_parser::option::comp_target,
  .arg = gcc_cmdline_parser::option::arg_none,
  .reject_negative = true,
},
{
  .name = "mabi=",
  .code = opt_code_i386_unused,
  .comp = gcc_cmdline_parser::option::comp_target,
  .arg = gcc_cmdline_parser::option::arg_joined,
  .reject_negative = true,
},
{
  .name = "mabm",
  .code = opt_code_i386_mabm,
  .comp = gcc_cmdline_parser::option::comp_target,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "maccumulate-outgoing-args",
  .code = opt_code_i386_maccumulate_outgoing_args,
  .comp = gcc_cmdline_parser::option::comp_target,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "maddress-mode=",
  .code = opt_code_i386_unused,
  .comp = gcc_cmdline_parser::option::comp_target,
  .arg = gcc_cmdline_parser::option::arg_joined,
  .reject_negative = true,
},
{
  .name = "madx",
  .code = opt_code_i386_madx,
  .comp = gcc_cmdline_parser::option::comp_target,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "maes",
  .code = opt_code_i386_maes,
  .comp = gcc_cmdline_parser::option::comp_target,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "malign-data=",
  .code = opt_code_i386_unused,
  .comp = gcc_cmdline_parser::option::comp_target,
  .arg = gcc_cmdline_parser::option::arg_joined,
  .reject_negative = true,
  .alias = {},
  .negative = nullptr,
  .min_gcc_version = {5, 1, 0},
},
{
  .name = "malign-double",
  .code = opt_code_i386_malign_double,
  .comp = gcc_cmdline_parser::option::comp_target,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "malign-functions=",
  .code = opt_code_i386_unused,
  .comp = gcc_cmdline_parser::option::comp_target,
  .arg = gcc_cmdline_parser::option::arg_joined,
  .reject_negative = true,
},
{
  .name = "malign-jumps=",
  .code = opt_code_i386_unused,
  .comp = gcc_cmdline_parser::option::comp_target,
  .arg = gcc_cmdline_parser::option::arg_joined,
  .reject_negative = true,
},
{
  .name = "malign-loops=",
  .code = opt_code_i386_unused,
  .comp = gcc_cmdline_parser::option::comp_target,
  .arg = gcc_cmdline_parser::option::arg_joined,
  .reject_negative = true,
},
{
  .name = "malign-stringops",
  .code = opt_code_i386_malign_stringops,
  .comp = gcc_cmdline_parser::option::comp_target,
  .arg = gcc_cmdline_parser::option::arg_none,
  .reject_negative = true,
},
{
  .name = "march=",
  .code = opt_code_i386_march,
  .comp = gcc_cmdline_parser::option::comp_target,
  .arg = gcc_cmdline_parser::option::arg_joined,
  .reject_negative = true,
  .alias = {},
  .negative = "march="
},
{
  .name = "masm=",
  .code = opt_code_i386_unused,
  .comp = gcc_cmdline_parser::option::comp_target,
  .arg = gcc_cmdline_parser::option::arg_joined,
  .reject_negative = true,
},
{
  .name = "mavx",
  .code = opt_code_i386_mavx,
  .comp = gcc_cmdline_parser::option::comp_target,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "mavx2",
  .code = opt_code_i386_mavx2,
  .comp = gcc_cmdline_parser::option::comp_target,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "mavx256-split-unaligned-load",
  .code = opt_code_i386_mavx256_split_unaligned_load,
  .comp = gcc_cmdline_parser::option::comp_target,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "mavx256-split-unaligned-store",
  .code = opt_code_i386_mavx256_split_unaligned_store,
  .comp = gcc_cmdline_parser::option::comp_target,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "mavx5124fmaps",
  .code = opt_code_i386_mavx5124fmaps,
  .comp = gcc_cmdline_parser::option::comp_target,
  .arg = gcc_cmdline_parser::option::arg_none,
  .reject_negative = false,
  .alias = {},
  .negative = nullptr,
  .min_gcc_version = {7, 1, 0},
},
{
  .name = "mavx5124vnniw",
  .code = opt_code_i386_mavx5124vnniw,
  .comp = gcc_cmdline_parser::option::comp_target,
  .arg = gcc_cmdline_parser::option::arg_none,
  .reject_negative = false,
  .alias = {},
  .negative = nullptr,
  .min_gcc_version = {7, 1, 0},
},
{
  .name = "mavx512bitalg",
  .code = opt_code_i386_mavx512bitalg,
  .comp = gcc_cmdline_parser::option::comp_target,
  .arg = gcc_cmdline_parser::option::arg_none,
  .reject_negative = false,
  .alias = {},
  .negative = nullptr,
  .min_gcc_version = {8, 1, 0},
},
{
  .name = "mavx512bw",
  .code = opt_code_i386_mavx512bw,
  .comp = gcc_cmdline_parser::option::comp_target,
  .arg = gcc_cmdline_parser::option::arg_none,
  .reject_negative = false,
  .alias = {},
  .negative = nullptr,
  .min_gcc_version = {5, 1, 0},
},
{
  .name = "mavx512cd",
  .code = opt_code_i386_mavx512cd,
  .comp = gcc_cmdline_parser::option::comp_target,
  .arg = gcc_cmdline_parser::option::arg_none,
  .reject_negative = false,
  .alias = {},
  .negative = nullptr,
  .min_gcc_version = {4, 9, 0},
},
{
  .name = "mavx512dq",
  .code = opt_code_i386_mavx512dq,
  .comp = gcc_cmdline_parser::option::comp_target,
  .arg = gcc_cmdline_parser::option::arg_none,
  .reject_negative = false,
  .alias = {},
  .negative = nullptr,
  .min_gcc_version = {5, 1, 0},
},
{
  .name = "mavx512er",
  .code = opt_code_i386_mavx512er,
  .comp = gcc_cmdline_parser::option::comp_target,
  .arg = gcc_cmdline_parser::option::arg_none,
  .reject_negative = false,
  .alias = {},
  .negative = nullptr,
  .min_gcc_version = {4, 9, 0},
},
{
  .name = "mavx512f",
  .code = opt_code_i386_mavx512f,
  .comp = gcc_cmdline_parser::option::comp_target,
  .arg = gcc_cmdline_parser::option::arg_none,
  .reject_negative = false,
  .alias = {},
  .negative = nullptr,
  .min_gcc_version = {4, 9, 0},
},
{
  .name = "mavx512ifma",
  .code = opt_code_i386_mavx512ifma,
  .comp = gcc_cmdline_parser::option::comp_target,
  .arg = gcc_cmdline_parser::option::arg_none,
  .reject_negative = false,
  .alias = {},
  .negative = nullptr,
  .min_gcc_version = {5, 1, 0},
},
{
  .name = "mavx512pf",
  .code = opt_code_i386_mavx512pf,
  .comp = gcc_cmdline_parser::option::comp_target,
  .arg = gcc_cmdline_parser::option::arg_none,
  .reject_negative = false,
  .alias = {},
  .negative = nullptr,
  .min_gcc_version = {4, 9, 0},
},
{
  .name = "mavx512vbmi",
  .code = opt_code_i386_mavx512vbmi,
  .comp = gcc_cmdline_parser::option::comp_target,
  .arg = gcc_cmdline_parser::option::arg_none,
  .reject_negative = false,
  .alias = {},
  .negative = nullptr,
  .min_gcc_version = {5, 1, 0},
},
{
  .name = "mavx512vbmi2",
  .code = opt_code_i386_mavx512vbmi2,
  .comp = gcc_cmdline_parser::option::comp_target,
  .arg = gcc_cmdline_parser::option::arg_none,
  .reject_negative = false,
  .alias = {},
  .negative = nullptr,
  .min_gcc_version = {8, 1, 0},
},
{
  .name = "mavx512vl",
  .code = opt_code_i386_mavx512vl,
  .comp = gcc_cmdline_parser::option::comp_target,
  .arg = gcc_cmdline_parser::option::arg_none,
  .reject_negative = false,
  .alias = {},
  .negative = nullptr,
  .min_gcc_version = {5, 1, 0},
},
{
  .name = "mavx512vnni",
  .code = opt_code_i386_mavx512vnni,
  .comp = gcc_cmdline_parser::option::comp_target,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "mavx512vpopcntdq",
  .code = opt_code_i386_mavx512vpopcntdq,
  .comp = gcc_cmdline_parser::option::comp_target,
  .arg = gcc_cmdline_parser::option::arg_none,
  .reject_negative = false,
  .alias = {},
  .negative = nullptr,
  .min_gcc_version = {7, 1, 0},
},
{
  .name = "mbmi",
  .code = opt_code_i386_mbmi,
  .comp = gcc_cmdline_parser::option::comp_target,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "mbmi2",
  .code = opt_code_i386_mbmi2,
  .comp = gcc_cmdline_parser::option::comp_target,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "mbranch-cost=",
  .code = opt_code_i386_unused,
  .comp = gcc_cmdline_parser::option::comp_target,
  .arg = gcc_cmdline_parser::option::arg_joined,
  .reject_negative = true,
},
{
  .name = "mcall-ms2sysv-xlogues",
  .code = opt_code_i386_mcall_ms2sysv_xlogues,
  .comp = gcc_cmdline_parser::option::comp_target,
  .arg = gcc_cmdline_parser::option::arg_none,
  .reject_negative = false,
  .alias = {},
  .negative = nullptr,
  .min_gcc_version = {8, 1, 0},
},
{
  .name = "mcet-switch",
  .code = opt_code_i386_unused,
  .comp = gcc_cmdline_parser::option::comp_target,
  .arg = gcc_cmdline_parser::option::arg_none,
  .reject_negative = false,
  .alias = {},
  .negative = nullptr,
  .min_gcc_version = {8, 1, 0},
},
{
  .name = "mcld",
  .code = opt_code_i386_mcld,
  .comp = gcc_cmdline_parser::option::comp_target,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "mcldemote",
  .code = opt_code_i386_mcldemote,
  .comp = gcc_cmdline_parser::option::comp_target,
  .arg = gcc_cmdline_parser::option::arg_none,
  .reject_negative = false,
  .alias = {},
  .negative = nullptr,
  .min_gcc_version = {9, 1, 0},
},
{
  .name = "mclflushopt",
  .code = opt_code_i386_mclflushopt,
  .comp = gcc_cmdline_parser::option::comp_target,
  .arg = gcc_cmdline_parser::option::arg_none,
  .reject_negative = false,
  .alias = {},
  .negative = nullptr,
  .min_gcc_version = {5, 1, 0},
},
{
  .name = "mclwb",
  .code = opt_code_i386_mclwb,
  .comp = gcc_cmdline_parser::option::comp_target,
  .arg = gcc_cmdline_parser::option::arg_none,
  .reject_negative = false,
  .alias = {},
  .negative = nullptr,
  .min_gcc_version = {5, 1, 0},
},
{
  .name = "mclzero",
  .code = opt_code_i386_mclzero,
  .comp = gcc_cmdline_parser::option::comp_target,
  .arg = gcc_cmdline_parser::option::arg_none,
  .reject_negative = false,
  .alias = {},
  .negative = nullptr,
  .min_gcc_version = {6, 1, 0},
},
{
  .name = "mcmodel=",
  .code = opt_code_i386_mcmodel,
  .comp = gcc_cmdline_parser::option::comp_target,
  .arg = gcc_cmdline_parser::option::arg_joined,
  .reject_negative = true,
},
{
  .name = "mcpu=",
  .code = opt_code_i386_unused,
  .comp = gcc_cmdline_parser::option::comp_target,
  .arg = gcc_cmdline_parser::option::arg_joined,
  .reject_negative = true,
  .alias = { "mtune=" },
},
{
  .name = "mcrc32",
  .code = opt_code_i386_mcrc32,
  .comp = gcc_cmdline_parser::option::comp_target,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "mcx16",
  .code = opt_code_i386_mcx16,
  .comp = gcc_cmdline_parser::option::comp_target,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "mdispatch-scheduler",
  .code = opt_code_i386_unused,
  .comp = gcc_cmdline_parser::option::comp_target,
  .arg = gcc_cmdline_parser::option::arg_none,
  .reject_negative = true,
},
{
  .name = "mdump-tune-features",
  .code = opt_code_i386_unused,
  .comp = gcc_cmdline_parser::option::comp_target,
  .arg = gcc_cmdline_parser::option::arg_none,
  .reject_negative = true,
  .alias = {},
  .negative = nullptr,
  .min_gcc_version = {4, 9, 0},
},
{
  .name = "mf16c",
  .code = opt_code_i386_mf16c,
  .comp = gcc_cmdline_parser::option::comp_target,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "mfancy-math-387",
  .code = opt_code_i386_mfancy_math_387,
  .comp = gcc_cmdline_parser::option::comp_target,
  .arg = gcc_cmdline_parser::option::arg_none,
  .reject_negative = true,
},
{
  .name = "mfentry",
  .code = opt_code_i386_unused,
  .comp = gcc_cmdline_parser::option::comp_target,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "mfentry-name=",
  .code = opt_code_i386_unused,
  .comp = gcc_cmdline_parser::option::comp_target,
  .arg = gcc_cmdline_parser::option::arg_joined,
  .reject_negative = true,
  .alias = {},
  .negative = nullptr,
  .min_gcc_version = {9, 1, 0},
},
{
  .name = "mfentry-section=",
  .code = opt_code_i386_unused,
  .comp = gcc_cmdline_parser::option::comp_target,
  .arg = gcc_cmdline_parser::option::arg_joined,
  .reject_negative = true,
  .alias = {},
  .negative = nullptr,
  .min_gcc_version = {9, 1, 0},
},
{
  .name = "mfma",
  .code = opt_code_i386_mfma,
  .comp = gcc_cmdline_parser::option::comp_target,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "mfma4",
  .code = opt_code_i386_mfma4,
  .comp = gcc_cmdline_parser::option::comp_target,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "mforce-drap",
  .code = opt_code_i386_unused,
  .comp = gcc_cmdline_parser::option::comp_target,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "mforce-indirect-call",
  .code = opt_code_i386_unused,
  .comp = gcc_cmdline_parser::option::comp_target,
  .arg = gcc_cmdline_parser::option::arg_none,
  .reject_negative = false,
  .alias = {},
  .negative = nullptr,
  .min_gcc_version = {8, 1, 0},
},
{
  .name = "mfp-ret-in-387",
  .code = opt_code_i386_mfp_ret_in_387,
  .comp = gcc_cmdline_parser::option::comp_target,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "mfpmath=",
  .code = opt_code_i386_mfpmath,
  .comp = gcc_cmdline_parser::option::comp_target,
  .arg = gcc_cmdline_parser::option::arg_joined,
  .reject_negative = true,
},
{
  .name = "mfsgsbase",
  .code = opt_code_i386_mfsgsbase,
  .comp = gcc_cmdline_parser::option::comp_target,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "mfunction-return=",
  .code = opt_code_i386_unused,
  .comp = gcc_cmdline_parser::option::comp_target,
  .arg = gcc_cmdline_parser::option::arg_joined,
  .reject_negative = true,
  .alias = {},
  .negative = nullptr,
  .min_gcc_version = {6, 5, 0},
  .max_gcc_version = {6, 5, std::numeric_limits<unsigned int>::max()},
},
{
  .name = "mfunction-return=",
  .code = opt_code_i386_unused,
  .comp = gcc_cmdline_parser::option::comp_target,
  .arg = gcc_cmdline_parser::option::arg_joined,
  .reject_negative = true,
  .alias = {},
  .negative = nullptr,
  .min_gcc_version = {7, 3, 0},
},
{
  .name = "mfxsr",
  .code = opt_code_i386_mfxsr,
  .comp = gcc_cmdline_parser::option::comp_target,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "mgeneral-regs-only",
  .code = opt_code_i386_mgeneral_regs_only,
  .comp = gcc_cmdline_parser::option::comp_target,
  .arg = gcc_cmdline_parser::option::arg_none,
  .reject_negative = true,
  .alias = {},
  .negative = nullptr,
  .min_gcc_version = {7, 1, 0},
},
{
  .name = "mgfni",
  .code = opt_code_i386_mgfni,
  .comp = gcc_cmdline_parser::option::comp_target,
  .arg = gcc_cmdline_parser::option::arg_none,
  .reject_negative = false,
  .alias = {},
  .negative = nullptr,
  .min_gcc_version = {8, 1, 0},
},
{
  .name = "mhard-float",
  .code = opt_code_i386_mhard_float,
  .comp = gcc_cmdline_parser::option::comp_target,
  .arg = gcc_cmdline_parser::option::arg_none,
  .reject_negative = true,
},
{
  .name = "mhle",
  .code = opt_code_i386_mhle,
  .comp = gcc_cmdline_parser::option::comp_target,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "miamcu",
  .code = opt_code_i386_miamcu,
  .comp = gcc_cmdline_parser::option::comp_target,
  .arg = gcc_cmdline_parser::option::arg_none,
  .reject_negative = false,
  .alias = {},
  .negative = nullptr,
  .min_gcc_version = {6, 1, 0},
},
{
  .name = "mieee-fp",
  .code = opt_code_i386_mieee_fp,
  .comp = gcc_cmdline_parser::option::comp_target,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "mincoming-stack-boundary=",
  .code = opt_code_i386_mincoming_stack_boundary,
  .comp = gcc_cmdline_parser::option::comp_target,
  .arg = gcc_cmdline_parser::option::arg_joined,
  .reject_negative = true,
},
{
  .name = "mindirect-branch-register",
  .code = opt_code_i386_unused,
  .comp = gcc_cmdline_parser::option::comp_target,
  .arg = gcc_cmdline_parser::option::arg_none,
  .reject_negative = false,
  .alias = {},
  .negative = nullptr,
  .min_gcc_version = {6, 5, 0},
  .max_gcc_version = {6, 5, std::numeric_limits<unsigned int>::max()},
},
{
  .name = "mindirect-branch-register",
  .code = opt_code_i386_unused,
  .comp = gcc_cmdline_parser::option::comp_target,
  .arg = gcc_cmdline_parser::option::arg_none,
  .reject_negative = false,
  .alias = {},
  .negative = nullptr,
  .min_gcc_version = {7, 3, 0},
},
{
  .name = "mindirect-branch=",
  .code = opt_code_i386_unused,
  .comp = gcc_cmdline_parser::option::comp_target,
  .arg = gcc_cmdline_parser::option::arg_joined,
  .reject_negative = true,
  .alias = {},
  .negative = nullptr,
  .min_gcc_version = {6, 5, 0},
  .max_gcc_version = {6, 5, std::numeric_limits<unsigned int>::max()},
},
{
  .name = "mindirect-branch=",
  .code = opt_code_i386_unused,
  .comp = gcc_cmdline_parser::option::comp_target,
  .arg = gcc_cmdline_parser::option::arg_joined,
  .reject_negative = true,
  .alias = {},
  .negative = nullptr,
  .min_gcc_version = {7, 3, 0},
},
{
  .name = "minline-all-stringops",
  .code = opt_code_i386_minline_all_stringops,
  .comp = gcc_cmdline_parser::option::comp_target,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "minline-stringops-dynamically",
  .code = opt_code_i386_minline_stringops_dynamically,
  .comp = gcc_cmdline_parser::option::comp_target,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "minstrument-return=",
  .code = opt_code_i386_unused,
  .comp = gcc_cmdline_parser::option::comp_target,
  .arg = gcc_cmdline_parser::option::arg_joined,
  .reject_negative = true,
  .alias = {},
  .negative = nullptr,
  .min_gcc_version = {9, 1, 0},
},
{
  .name = "mintel-syntax",
  .code = opt_code_i386_unused,
  .comp = gcc_cmdline_parser::option::comp_target,
  .arg = gcc_cmdline_parser::option::arg_none,
  .reject_negative = false,
  .alias = { "masm=", "intel", "att" },
},
{
  .name = "mlarge-data-threshold=",
  .code = opt_code_i386_unused,
  .comp = gcc_cmdline_parser::option::comp_target,
  .arg = gcc_cmdline_parser::option::arg_joined,
  .reject_negative = true,
},
{
  .name = "mlong-double-128",
  .code = opt_code_i386_mlong_double_128,
  .comp = gcc_cmdline_parser::option::comp_target,
  .arg = gcc_cmdline_parser::option::arg_none,
  .reject_negative = true,
  .alias = {},
  .negative = "mlong-double-80",
  .min_gcc_version = {4, 9, 0},
},
{
  .name = "mlong-double-64",
  .code = opt_code_i386_mlong_double_64,
  .comp = gcc_cmdline_parser::option::comp_target,
  .arg = gcc_cmdline_parser::option::arg_none,
  .reject_negative = true,
  .alias = {},
  .negative = "mlong-double-80",
  .min_gcc_version = {},
  .max_gcc_version = {4, 8, 5},
},
{
  .name = "mlong-double-64",
  .code = opt_code_i386_mlong_double_64,
  .comp = gcc_cmdline_parser::option::comp_target,
  .arg = gcc_cmdline_parser::option::arg_none,
  .reject_negative = true,
  .alias = {},
  .negative = "mlong-double-128",
  .min_gcc_version = {4, 9, 0},
},
{
  .name = "mlong-double-80",
  .code = opt_code_i386_mlong_double_80,
  .comp = gcc_cmdline_parser::option::comp_target,
  .arg = gcc_cmdline_parser::option::arg_none,
  .reject_negative = true,
  .alias = {},
  .negative = "mlong-double-64",
},
{
  .name = "mlwp",
  .code = opt_code_i386_mlwp,
  .comp = gcc_cmdline_parser::option::comp_target,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "mlzcnt",
  .code = opt_code_i386_mlzcnt,
  .comp = gcc_cmdline_parser::option::comp_target,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "mmanual-endbr",
  .code = opt_code_i386_unused,
  .comp = gcc_cmdline_parser::option::comp_target,
  .arg = gcc_cmdline_parser::option::arg_none,
  .reject_negative = false,
  .alias = {},
  .negative = nullptr,
  .min_gcc_version = {9, 1, 0},
},
{
  .name = "mmemcpy-strategy=",
  .code = opt_code_i386_unused,
  .comp = gcc_cmdline_parser::option::comp_target,
  .arg = gcc_cmdline_parser::option::arg_joined,
  .reject_negative = true,
  .alias = {},
  .negative = nullptr,
  .min_gcc_version = {4, 9, 0},
},
{
  .name = "mmemset-strategy=",
  .code = opt_code_i386_unused,
  .comp = gcc_cmdline_parser::option::comp_target,
  .arg = gcc_cmdline_parser::option::arg_joined,
  .reject_negative = true,
  .alias = {},
  .negative = nullptr,
  .min_gcc_version = {4, 9, 0},
},
{
  .name = "mmitigate-rop",
  .code = opt_code_i386_unused,
  .comp = gcc_cmdline_parser::option::comp_target,
  .arg = gcc_cmdline_parser::option::arg_none,
  .reject_negative = false,
  .alias = {},
  .negative = nullptr,
  .min_gcc_version = {6, 1, 0},
},
{
  .name = "mmmx",
  .code = opt_code_i386_mmmx,
  .comp = gcc_cmdline_parser::option::comp_target,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "mmovbe",
  .code = opt_code_i386_mmovbe,
  .comp = gcc_cmdline_parser::option::comp_target,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "mmovdir64b",
  .code = opt_code_i386_mmovdir64b,
  .comp = gcc_cmdline_parser::option::comp_target,
  .arg = gcc_cmdline_parser::option::arg_none,
  .reject_negative = false,
  .alias = {},
  .negative = nullptr,
  .min_gcc_version = {8, 1, 0},
},
{
  .name = "mmovdiri",
  .code = opt_code_i386_mmovdiri,
  .comp = gcc_cmdline_parser::option::comp_target,
  .arg = gcc_cmdline_parser::option::arg_none,
  .reject_negative = false,
  .alias = {},
  .negative = nullptr,
  .min_gcc_version = {8, 1, 0},
},
{
  .name = "mmpx",
  .code = opt_code_i386_mmpx,
  .comp = gcc_cmdline_parser::option::comp_target,
  .arg = gcc_cmdline_parser::option::arg_none,
  .reject_negative = false,
  .alias = {},
  .negative = nullptr,
  .min_gcc_version = {5, 1, 0},
},
{
  .name = "mms-bitfields",
  .code = opt_code_i386_mms_bitfields,
  .comp = gcc_cmdline_parser::option::comp_target,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "mmwaitx",
  .code = opt_code_i386_mmwaitx,
  .comp = gcc_cmdline_parser::option::comp_target,
  .arg = gcc_cmdline_parser::option::arg_none,
  .reject_negative = false,
  .alias = {},
  .negative = nullptr,
  .min_gcc_version = {5, 2, 0},
},
{
  .name = "mno-align-stringops",
  .code = opt_code_i386_mno_align_stringops,
  .comp = gcc_cmdline_parser::option::comp_target,
  .arg = gcc_cmdline_parser::option::arg_none,
  .reject_negative = true,
},
{
  .name = "mno-default",
  .code = opt_code_i386_unused,
  .comp = gcc_cmdline_parser::option::comp_target,
  .arg = gcc_cmdline_parser::option::arg_none,
  .reject_negative = true,
  .alias = {},
  .negative = nullptr,
  .min_gcc_version = {4, 9, 0},
},
{
  .name = "mno-fancy-math-387",
  .code = opt_code_i386_mno_fancy_math_387,
  .comp = gcc_cmdline_parser::option::comp_target,
  .arg = gcc_cmdline_parser::option::arg_none,
  .reject_negative = true,
},
{
  .name = "mno-push-args",
  .code = opt_code_i386_mno_push_args,
  .comp = gcc_cmdline_parser::option::comp_target,
  .arg = gcc_cmdline_parser::option::arg_none,
  .reject_negative = true,
},
{
  .name = "mno-red-zone",
  .code = opt_code_i386_mno_red_zone,
  .comp = gcc_cmdline_parser::option::comp_target,
  .arg = gcc_cmdline_parser::option::arg_none,
  .reject_negative = true,
},
{
  .name = "mno-sse4",
  .code = opt_code_i386_mno_sse4,
  .comp = gcc_cmdline_parser::option::comp_target,
  .arg = gcc_cmdline_parser::option::arg_none,
  .reject_negative = true,
},
{
  .name = "mnop-mcount",
  .code = opt_code_i386_unused,
  .comp = gcc_cmdline_parser::option::comp_target,
  .arg = gcc_cmdline_parser::option::arg_none,
  .reject_negative = false,
  .alias = {},
  .negative = nullptr,
  .min_gcc_version = {5, 1, 0},
},
{
  .name = "momit-leaf-frame-pointer",
  .code = opt_code_i386_momit_leaf_frame_pointer,
  .comp = gcc_cmdline_parser::option::comp_target,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "mpc32",
  .code = opt_code_i386_unused,
  .comp = gcc_cmdline_parser::option::comp_target,
  .arg = gcc_cmdline_parser::option::arg_none,
  .reject_negative = true,
},
{
  .name = "mpc64",
  .code = opt_code_i386_unused,
  .comp = gcc_cmdline_parser::option::comp_target,
  .arg = gcc_cmdline_parser::option::arg_none,
  .reject_negative = true,
},
{
  .name = "mpc80",
  .code = opt_code_i386_unused,
  .comp = gcc_cmdline_parser::option::comp_target,
  .arg = gcc_cmdline_parser::option::arg_none,
  .reject_negative = true,
},
{
  .name = "mpclmul",
  .code = opt_code_i386_mpclmul,
  .comp = gcc_cmdline_parser::option::comp_target,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "mpcommit",
  .code = opt_code_i386_mpcommit,
  .comp = gcc_cmdline_parser::option::comp_target,
  .arg = gcc_cmdline_parser::option::arg_none,
  .reject_negative = false,
  .alias = {},
  .negative = nullptr,
  .min_gcc_version = {5, 1, 0},
},
{
  .name = "mpconfig",
  .code = opt_code_i386_mpconfig,
  .comp = gcc_cmdline_parser::option::comp_target,
  .arg = gcc_cmdline_parser::option::arg_none,
  .reject_negative = false,
  .alias = {},
  .negative = nullptr,
  .min_gcc_version = {8, 1, 0},
},
{
  .name = "mpku",
  .code = opt_code_i386_mpku,
  .comp = gcc_cmdline_parser::option::comp_target,
  .arg = gcc_cmdline_parser::option::arg_none,
  .reject_negative = false,
  .alias = {},
  .negative = nullptr,
  .min_gcc_version = {6, 1, 0},
},
{
  .name = "mpopcnt",
  .code = opt_code_i386_mpopcnt,
  .comp = gcc_cmdline_parser::option::comp_target,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "mprefer-avx128",
  .code = opt_code_i386_unused,
  .comp = gcc_cmdline_parser::option::comp_target,
  .arg = gcc_cmdline_parser::option::arg_none,
  .reject_negative = false,
  .alias = {},
  .negative = nullptr,
  .min_gcc_version = {},
  .max_gcc_version = {7, 4, std::numeric_limits<unsigned int>::max()},
},
{
  .name = "mprefer-avx128",
  .code = opt_code_i386_unused,
  .comp = gcc_cmdline_parser::option::comp_target,
  .arg = gcc_cmdline_parser::option::arg_none,
  .reject_negative = false,
  .alias = { "mprefer-vector-width=", "128", "256" },
  .negative = nullptr,
  .min_gcc_version = {8, 1, 0},
},
{
  .name = "mprefer-vector-width=",
  .code = opt_code_i386_unused,
  .comp = gcc_cmdline_parser::option::comp_target,
  .arg = gcc_cmdline_parser::option::arg_joined,
  .reject_negative = true,
  .alias = {},
  .negative = nullptr,
  .min_gcc_version = {8, 1, 0},
},
{
  .name = "mpreferred-stack-boundary=",
  .code = opt_code_i386_mpreferred_stack_boundary,
  .comp = gcc_cmdline_parser::option::comp_target,
  .arg = gcc_cmdline_parser::option::arg_joined,
  .reject_negative = true,
},
{
  .name = "mprefetchwt1",
  .code = opt_code_i386_mprefetchwt1,
  .comp = gcc_cmdline_parser::option::comp_target,
  .arg = gcc_cmdline_parser::option::arg_none,
  .reject_negative = false,
  .alias = {},
  .negative = nullptr,
  .min_gcc_version = {4, 9, 0},
},
{
  .name = "mprfchw",
  .code = opt_code_i386_mprfchw,
  .comp = gcc_cmdline_parser::option::comp_target,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "mptwrite",
  .code = opt_code_i386_mptwrite,
  .comp = gcc_cmdline_parser::option::comp_target,
  .arg = gcc_cmdline_parser::option::arg_none,
  .reject_negative = false,
  .alias = {},
  .negative = nullptr,
  .min_gcc_version = {9, 1, 0},
},
{
  .name = "mpush-args",
  .code = opt_code_i386_mpush_args,
  .comp = gcc_cmdline_parser::option::comp_target,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "mrdpid",
  .code = opt_code_i386_mrdpid,
  .comp = gcc_cmdline_parser::option::comp_target,
  .arg = gcc_cmdline_parser::option::arg_none,
  .reject_negative = false,
  .alias = {},
  .negative = nullptr,
  .min_gcc_version = {7, 1, 0},
},
{
  .name = "mrdrnd",
  .code = opt_code_i386_mrdrnd,
  .comp = gcc_cmdline_parser::option::comp_target,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "mrdseed",
  .code = opt_code_i386_mrdseed,
  .comp = gcc_cmdline_parser::option::comp_target,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "mrecip",
  .code = opt_code_i386_mrecip,
  .comp = gcc_cmdline_parser::option::comp_target,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "mrecip=",
  .code = opt_code_i386_unused,
  .comp = gcc_cmdline_parser::option::comp_target,
  .arg = gcc_cmdline_parser::option::arg_joined,
  .reject_negative = true,
},
{
  .name = "mrecord-mcount",
  .code = opt_code_i386_unused,
  .comp = gcc_cmdline_parser::option::comp_target,
  .arg = gcc_cmdline_parser::option::arg_none,
  .reject_negative = false,
  .alias = {},
  .negative = nullptr,
  .min_gcc_version = {5, 1, 0},
},
{
  .name = "mrecord-return",
  .code = opt_code_i386_unused,
  .comp = gcc_cmdline_parser::option::comp_target,
  .arg = gcc_cmdline_parser::option::arg_none,
  .reject_negative = false,
  .alias = {},
  .negative = nullptr,
  .min_gcc_version = {9, 1, 0},
},
{
  .name = "mred-zone",
  .code = opt_code_i386_mred_zone,
  .comp = gcc_cmdline_parser::option::comp_target,
  .arg = gcc_cmdline_parser::option::arg_none,
  .reject_negative = true,
},
{
  .name = "mregparm=",
  .code = opt_code_i386_unused,
  .comp = gcc_cmdline_parser::option::comp_target,
  .arg = gcc_cmdline_parser::option::arg_joined,
  .reject_negative = true,
},
{
  .name = "mrtd",
  .code = opt_code_i386_mrtd,
  .comp = gcc_cmdline_parser::option::comp_target,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "mrtm",
  .code = opt_code_i386_mrtm,
  .comp = gcc_cmdline_parser::option::comp_target,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "msahf",
  .code = opt_code_i386_msahf,
  .comp = gcc_cmdline_parser::option::comp_target,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "msgx",
  .code = opt_code_i386_msgx,
  .comp = gcc_cmdline_parser::option::comp_target,
  .arg = gcc_cmdline_parser::option::arg_none,
  .reject_negative = false,
  .alias = {},
  .negative = nullptr,
  .min_gcc_version = {7, 1, 0},
},
{
  .name = "msha",
  .code = opt_code_i386_msha,
  .comp = gcc_cmdline_parser::option::comp_target,
  .arg = gcc_cmdline_parser::option::arg_none,
  .reject_negative = false,
  .alias = {},
  .negative = nullptr,
  .min_gcc_version = {4, 9, 0},
},
{
  .name = "mshstk",
  .code = opt_code_i386_mshstk,
  .comp = gcc_cmdline_parser::option::comp_target,
  .arg = gcc_cmdline_parser::option::arg_none,
  .reject_negative = false,
  .alias = {},
  .negative = nullptr,
  .min_gcc_version = {8, 1, 0},
},
{
  .name = "mskip-rax-setup",
  .code = opt_code_i386_unused,
  .comp = gcc_cmdline_parser::option::comp_target,
  .arg = gcc_cmdline_parser::option::arg_none,
  .reject_negative = false,
  .alias = {},
  .negative = nullptr,
  .min_gcc_version = {5, 1, 0},
},
{
  .name = "msoft-float",
  .code = opt_code_i386_msoft_float,
  .comp = gcc_cmdline_parser::option::comp_target,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "msse",
  .code = opt_code_i386_msse,
  .comp = gcc_cmdline_parser::option::comp_target,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "msse2",
  .code = opt_code_i386_msse2,
  .comp = gcc_cmdline_parser::option::comp_target,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "msse2avx",
  .code = opt_code_i386_unused,
  .comp = gcc_cmdline_parser::option::comp_target,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "msse3",
  .code = opt_code_i386_msse3,
  .comp = gcc_cmdline_parser::option::comp_target,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "msse4",
  .code = opt_code_i386_msse4,
  .comp = gcc_cmdline_parser::option::comp_target,
  .arg = gcc_cmdline_parser::option::arg_none,
  .reject_negative = true,
},
{
  .name = "msse4.1",
  .code = opt_code_i386_msse4_1,
  .comp = gcc_cmdline_parser::option::comp_target,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "msse4.2",
  .code = opt_code_i386_msse4_2,
  .comp = gcc_cmdline_parser::option::comp_target,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "msse4a",
  .code = opt_code_i386_msse4a,
  .comp = gcc_cmdline_parser::option::comp_target,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "msse5",
  .code = opt_code_i386_unused,
  .comp = gcc_cmdline_parser::option::comp_target,
  .arg = gcc_cmdline_parser::option::arg_none,
  .reject_negative = false,
  .alias = { "mavx" },
},
{
  .name = "msseregparm",
  .code = opt_code_i386_msseregparm,
  .comp = gcc_cmdline_parser::option::comp_target,
  .arg = gcc_cmdline_parser::option::arg_none,
  .reject_negative = true,
},
{
  .name = "mssse3",
  .code = opt_code_i386_mssse3,
  .comp = gcc_cmdline_parser::option::comp_target,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "mstack-arg-probe",
  .code = opt_code_i386_mstack_arg_probe,
  .comp = gcc_cmdline_parser::option::comp_target,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "mstack-protector-guard-offset=",
  .code = opt_code_i386_unused,
  .comp = gcc_cmdline_parser::option::comp_target,
  .arg = gcc_cmdline_parser::option::arg_joined,
  .reject_negative = true,
  .alias = {},
  .negative = nullptr,
  .min_gcc_version = {8, 1, 0},
},
{
  .name = "mstack-protector-guard-reg=",
  .code = opt_code_i386_unused,
  .comp = gcc_cmdline_parser::option::comp_target,
  .arg = gcc_cmdline_parser::option::arg_joined,
  .reject_negative = true,
  .alias = {},
  .negative = nullptr,
  .min_gcc_version = {8, 1, 0},
},
{
  .name = "mstack-protector-guard-symbol=",
  .code = opt_code_i386_unused,
  .comp = gcc_cmdline_parser::option::comp_target,
  .arg = gcc_cmdline_parser::option::arg_joined,
  .reject_negative = true,
  .alias = {},
  .negative = nullptr,
  .min_gcc_version = {8, 1, 0},
},
{
  .name = "mstack-protector-guard=",
  .code = opt_code_i386_unused,
  .comp = gcc_cmdline_parser::option::comp_target,
  .arg = gcc_cmdline_parser::option::arg_joined,
  .reject_negative = true,
  .alias = {},
  .negative = nullptr,
  .min_gcc_version = {4, 9, 0},
},
{
  .name = "mstackrealign",
  .code = opt_code_i386_mstackrealign,
  .comp = gcc_cmdline_parser::option::comp_target,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "mstringop-strategy=",
  .code = opt_code_i386_unused,
  .comp = gcc_cmdline_parser::option::comp_target,
  .arg = gcc_cmdline_parser::option::arg_joined,
  .reject_negative = true,
},
{
  .name = "mstv",
  .code = opt_code_i386_mstv,
  .comp = gcc_cmdline_parser::option::comp_target,
  .arg = gcc_cmdline_parser::option::arg_none,
  .reject_negative = false,
  .alias = {},
  .negative = nullptr,
  .min_gcc_version = {6, 1, 0},
},
{
  .name = "mtbm",
  .code = opt_code_i386_mtbm,
  .comp = gcc_cmdline_parser::option::comp_target,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "mtls-dialect=",
  .code = opt_code_i386_unused,
  .comp = gcc_cmdline_parser::option::comp_target,
  .arg = gcc_cmdline_parser::option::arg_joined,
  .reject_negative = true,
},
{
  .name = "mtls-direct-seg-refs",
  .code = opt_code_i386_mtls_direct_seg_refs,
  .comp = gcc_cmdline_parser::option::comp_target,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "mtune-ctrl=",
  .code = opt_code_i386_mtune_ctrl,
  .comp = gcc_cmdline_parser::option::comp_target,
  .arg = gcc_cmdline_parser::option::arg_joined,
  .reject_negative = true,
  .alias = {},
  .negative = nullptr,
  .min_gcc_version = {4, 9, 0},
},
{
  .name = "mtune=",
  .code = opt_code_i386_mtune,
  .comp = gcc_cmdline_parser::option::comp_target,
  .arg = gcc_cmdline_parser::option::arg_joined,
  .reject_negative = true,
  .alias = {},
  .negative = "mtune="
},
{
  .name = "mvaes",
  .code = opt_code_i386_mvaes,
  .comp = gcc_cmdline_parser::option::comp_target,
  .arg = gcc_cmdline_parser::option::arg_none,
  .reject_negative = false,
  .alias = {},
  .negative = nullptr,
  .min_gcc_version = {8, 1, 0},
},
{
  .name = "mveclibabi=",
  .code = opt_code_i386_unused,
  .comp = gcc_cmdline_parser::option::comp_target,
  .arg = gcc_cmdline_parser::option::arg_joined,
  .reject_negative = true,
},
{
  .name = "mvect8-ret-in-mem",
  .code = opt_code_i386_mvect8_ret_in_mem,
  .comp = gcc_cmdline_parser::option::comp_target,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "mvpclmulqdq",
  .code = opt_code_i386_mvpclmulqdq,
  .comp = gcc_cmdline_parser::option::comp_target,
  .arg = gcc_cmdline_parser::option::arg_none,
  .reject_negative = false,
  .alias = {},
  .negative = nullptr,
  .min_gcc_version = {8, 1, 0},
},
{
  .name = "mvzeroupper",
  .code = opt_code_i386_mvzeroupper,
  .comp = gcc_cmdline_parser::option::comp_target,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "mwaitpkg",
  .code = opt_code_i386_mwaitpkg,
  .comp = gcc_cmdline_parser::option::comp_target,
  .arg = gcc_cmdline_parser::option::arg_none,
  .reject_negative = false,
  .alias = {},
  .negative = nullptr,
  .min_gcc_version = {9, 1, 0},
},
{
  .name = "mwbnoinvd",
  .code = opt_code_i386_mwbnoinvd,
  .comp = gcc_cmdline_parser::option::comp_target,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "mx32",
  .code = opt_code_i386_mx32,
  .comp = gcc_cmdline_parser::option::comp_target,
  .arg = gcc_cmdline_parser::option::arg_none,
  .reject_negative = true,
  .alias = {},
  .negative = "m32",
  .min_gcc_version = {},
  .max_gcc_version = {4, 8, 5},
},
{
  .name = "mx32",
  .code = opt_code_i386_mx32,
  .comp = gcc_cmdline_parser::option::comp_target,
  .arg = gcc_cmdline_parser::option::arg_none,
  .reject_negative = true,
  .alias = {},
  .negative = "m16",
  .min_gcc_version = {4, 9, 0},
},
{
  .name = "mxop",
  .code = opt_code_i386_mxop,
  .comp = gcc_cmdline_parser::option::comp_target,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "mxsave",
  .code = opt_code_i386_mxsave,
  .comp = gcc_cmdline_parser::option::comp_target,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "mxsavec",
  .code = opt_code_i386_mxsavec,
  .comp = gcc_cmdline_parser::option::comp_target,
  .arg = gcc_cmdline_parser::option::arg_none,
  .reject_negative = false,
  .alias = {},
  .negative = nullptr,
  .min_gcc_version = {5, 1, 0},
},
{
  .name = "mxsaveopt",
  .code = opt_code_i386_mxsaveopt,
  .comp = gcc_cmdline_parser::option::comp_target,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "mxsaves",
  .code = opt_code_i386_mxsaves,
  .comp = gcc_cmdline_parser::option::comp_target,
  .arg = gcc_cmdline_parser::option::arg_none,
  .reject_negative = false,
  .alias = {},
  .negative = nullptr,
  .min_gcc_version = {5, 1, 0},
},
