/*
 * Copyright (C) 2019  SUSE Software Solutions Germany GmbH
 *
 * This file is part of klp-ccp.
 *
 * klp-ccp is free software: you can redistribute it and/or modify it
 * under the terms of version 2 of the GNU General Public License as
 * published by the Free Software Foundation.
 *
 * klp-ccp is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with klp-ccp. If not, see <https://www.gnu.org/licenses/>.
 */

{
  .name = "###",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_driver,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "-assemble",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_driver,
  .arg = gcc_cmdline_parser::option::arg_none,
  .reject_negative = false,
  .alias = { "S" },
},
{
  .name = "-compile",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_driver,
  .arg = gcc_cmdline_parser::option::arg_none,
  .reject_negative = false,
  .alias = { "c" },
},
{
  .name = "-coverage",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_driver,
  .arg = gcc_cmdline_parser::option::arg_none,
  .reject_negative = false,
  .alias = { "coverage" },
},
{
  .name = "-debug",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
  .reject_negative = false,
  .alias = { "g" },
},
{
  .name = "-dump",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_separate,
  .reject_negative = false,
  .alias = { "d" },
},
{
  .name = "-dump=",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_joined,
  .reject_negative = false,
  .alias = { "d" },
},
{
  .name = "-dumpbase",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_separate,
  .reject_negative = false,
  .alias = { "dumpbase" },
},
{
  .name = "-dumpdir",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_separate,
  .reject_negative = false,
  .alias = { "dumpdir" },
},
{
  .name = "-entry",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_driver,
  .arg = gcc_cmdline_parser::option::arg_separate,
  .reject_negative = false,
  .alias = { "e" },
},
{
  .name = "-entry=",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_driver,
  .arg = gcc_cmdline_parser::option::arg_joined,
  .reject_negative = false,
  .alias = { "e" },
},
{
  .name = "-extra-warnings",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
  .reject_negative = false,
  .alias = { "Wextra" },
},
{
  .name = "-for-assembler",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_driver,
  .arg = gcc_cmdline_parser::option::arg_separate,
  .reject_negative = false,
  .alias = { "Xassembler" },
},
{
  .name = "-for-assembler=",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_driver,
  .arg = gcc_cmdline_parser::option::arg_joined_or_missing,
  .reject_negative = false,
  .alias = { "Xassembler" },
},
{
  .name = "-for-linker",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_driver,
  .arg = gcc_cmdline_parser::option::arg_separate,
  .reject_negative = false,
  .alias = { "Xlinker" },
},
{
  .name = "-for-linker=",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_driver,
  .arg = gcc_cmdline_parser::option::arg_joined_or_missing,
  .reject_negative = false,
  .alias = { "Xlinker" },
},
{
  .name = "-force-link",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_driver,
  .arg = gcc_cmdline_parser::option::arg_separate,
  .reject_negative = false,
  .alias = { "u" },
},
{
  .name = "-force-link=",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_driver,
  .arg = gcc_cmdline_parser::option::arg_joined,
  .reject_negative = false,
  .alias = { "u" },
},
{
  .name = "-help",
  .code = opt_code_common_unused,
  .comp = (gcc_cmdline_parser::option::comp_common |
	   gcc_cmdline_parser::option::comp_driver),
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "-help=",
  .code = opt_code_common_unused,
  .comp = (gcc_cmdline_parser::option::comp_common |
	   gcc_cmdline_parser::option::comp_driver),
  .arg = gcc_cmdline_parser::option::arg_joined,
},
{
  .name = "-language",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_driver,
  .arg = gcc_cmdline_parser::option::arg_separate,
  .reject_negative = false,
  .alias = { "x" },
},
{
  .name = "-language=",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_driver,
  .arg = gcc_cmdline_parser::option::arg_joined,
  .reject_negative = false,
  .alias = { "x" },
},
{
  .name = "-library-directory",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_driver,
  .arg = gcc_cmdline_parser::option::arg_separate,
  .reject_negative = false,
  .alias = { "L" },
},
{
  .name = "-library-directory=",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_driver,
  .arg = gcc_cmdline_parser::option::arg_joined,
  .reject_negative = false,
  .alias = { "L" },
},
{
  .name = "-no-canonical-prefixes",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_driver,
  .arg = gcc_cmdline_parser::option::arg_none,
  .reject_negative = false,
  .alias = { "no-canonical-prefixes" },
},
{
  .name = "-no-standard-libraries",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_driver,
  .arg = gcc_cmdline_parser::option::arg_none,
  .reject_negative = false,
  .alias = { "nostdlib" },
},
{
  .name = "-no-sysroot-suffix",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_driver,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "-no-warnings",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
  .reject_negative = false,
  .alias = { "w" },
},
{
  .name = "-optimize",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
  .reject_negative = false,
  .alias = { "O" },
},
{
  .name = "-output",
  .code = opt_code_common_unused,
  .comp = (gcc_cmdline_parser::option::comp_common |
	   gcc_cmdline_parser::option::comp_driver),
  .arg = gcc_cmdline_parser::option::arg_separate,
  .reject_negative = false,
  .alias = { "o" },
},
{
  .name = "-output=",
  .code = opt_code_common_unused,
  .comp = (gcc_cmdline_parser::option::comp_common |
	   gcc_cmdline_parser::option::comp_driver),
  .arg = gcc_cmdline_parser::option::arg_joined,
  .reject_negative = false,
  .alias = { "o" },
},
{
  .name = "-param",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_separate,
},
{
  .name = "-param=",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_joined,
  .reject_negative = false,
  .alias = { "-param" },
},
{
  .name = "-pass-exit-codes",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_driver,
  .arg = gcc_cmdline_parser::option::arg_none,
  .reject_negative = false,
  .alias = { "pass-exit-codes" },
},
{
  .name = "-pedantic",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
  .reject_negative = false,
  .alias = { "Wpedantic" },
},
{
  .name = "-pedantic-errors",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
  .reject_negative = false,
  .alias = { "pedantic-errors" },
},
{
  .name = "-pie",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_driver,
  .arg = gcc_cmdline_parser::option::arg_none,
  .reject_negative = false,
  .alias = { "pie" },
},
{
  .name = "-pipe",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_driver,
  .arg = gcc_cmdline_parser::option::arg_none,
  .reject_negative = false,
  .alias = { "pipe" },
},
{
  .name = "-prefix",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_driver,
  .arg = gcc_cmdline_parser::option::arg_separate,
  .reject_negative = false,
  .alias = { "B" },
},
{
  .name = "-prefix=",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_driver,
  .arg = gcc_cmdline_parser::option::arg_joined_or_missing,
  .reject_negative = false,
  .alias = { "B" },
},
{
  .name = "-preprocess",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_driver,
  .arg = gcc_cmdline_parser::option::arg_none,
  .reject_negative = false,
  .alias = { "E" },
},
{
  .name = "-print-file-name",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_driver,
  .arg = gcc_cmdline_parser::option::arg_separate,
  .reject_negative = false,
  .alias = { "print-file-name=" },
},
{
  .name = "-print-file-name=",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_driver,
  .arg = gcc_cmdline_parser::option::arg_joined_or_missing,
  .reject_negative = false,
  .alias = { "print-file-name=" },
},
{
  .name = "-print-libgcc-file-name",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_driver,
  .arg = gcc_cmdline_parser::option::arg_none,
  .reject_negative = false,
  .alias = { "print-libgcc-file-name" },
},
{
  .name = "-print-multi-directory",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_driver,
  .arg = gcc_cmdline_parser::option::arg_none,
  .reject_negative = false,
  .alias = { "print-multi-directory" },
},
{
  .name = "-print-multi-lib",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_driver,
  .arg = gcc_cmdline_parser::option::arg_none,
  .reject_negative = false,
  .alias = { "print-multi-lib" },
},
{
  .name = "-print-multi-os-directory",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_driver,
  .arg = gcc_cmdline_parser::option::arg_none,
  .reject_negative = false,
  .alias = { "print-multi-os-directory" },
},
{
  .name = "-print-multiarch",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_driver,
  .arg = gcc_cmdline_parser::option::arg_none,
  .reject_negative = false,
  .alias = { "print-multiarch" },
},
{
  .name = "-print-prog-name",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_driver,
  .arg = gcc_cmdline_parser::option::arg_separate,
  .reject_negative = false,
  .alias = { "print-prog-name=" },
},
{
  .name = "-print-prog-name=",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_driver,
  .arg = gcc_cmdline_parser::option::arg_joined_or_missing,
  .reject_negative = false,
  .alias = { "print-prog-name=" },
},
{
  .name = "-print-search-dirs",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_driver,
  .arg = gcc_cmdline_parser::option::arg_none,
  .reject_negative = false,
  .alias = { "print-search-dirs" },
},
{
  .name = "-print-sysroot",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_driver,
  .arg = gcc_cmdline_parser::option::arg_none,
  .reject_negative = false,
  .alias = { "print-sysroot" },
},
{
  .name = "-print-sysroot-headers-suffix",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_driver,
  .arg = gcc_cmdline_parser::option::arg_none,
  .reject_negative = false,
  .alias = { "print-sysroot-headers-suffix" },
},
{
  .name = "-profile",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
  .reject_negative = false,
  .alias = { "p" },
},
{
  .name = "-save-temps",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_driver,
  .arg = gcc_cmdline_parser::option::arg_none,
  .reject_negative = false,
  .alias = { "save-temps" },
},
{
  .name = "-shared",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_driver,
  .arg = gcc_cmdline_parser::option::arg_none,
  .reject_negative = false,
  .alias = { "shared" },
},
{
  .name = "-specs",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_driver,
  .arg = gcc_cmdline_parser::option::arg_separate,
  .reject_negative = false,
  .alias = { "specs=" },
},
{
  .name = "-specs=",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_driver,
  .arg = gcc_cmdline_parser::option::arg_joined,
  .reject_negative = false,
  .alias = { "specs=" },
},
{
  .name = "-static",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_driver,
  .arg = gcc_cmdline_parser::option::arg_none,
  .reject_negative = false,
  .alias = { "static" },
},
{
  .name = "-static-pie",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_driver,
  .arg = gcc_cmdline_parser::option::arg_none,
  .reject_negative = false,
  .alias = { "static-pie" },
  .negative = nullptr,
  .min_gcc_version = {8, 1, 0},
},
{
  .name = "-symbolic",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_driver,
  .arg = gcc_cmdline_parser::option::arg_none,
  .reject_negative = false,
  .alias = { "symbolic" },
},
{
  .name = "-sysroot",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_driver,
  .arg = gcc_cmdline_parser::option::arg_separate,
  .reject_negative = false,
  .alias = { "-sysroot=" },
},
{
  .name = "-sysroot=",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_driver,
  .arg = gcc_cmdline_parser::option::arg_joined_or_missing,
},
{
  .name = "-target-help",
  .code = opt_code_common_unused,
  .comp = (gcc_cmdline_parser::option::comp_common |
	   gcc_cmdline_parser::option::comp_driver),
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "-time",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_driver,
  .arg = gcc_cmdline_parser::option::arg_none,
  .reject_negative = false,
  .alias = { "time" },
},
{
  .name = "-verbose",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_driver,
  .arg = gcc_cmdline_parser::option::arg_none,
  .reject_negative = false,
  .alias = { "v" },
},
{
  .name = "-version",
  .code = opt_code_common_unused,
  .comp = (gcc_cmdline_parser::option::comp_common |
	   gcc_cmdline_parser::option::comp_driver),
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "B",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_driver,
  .arg = (gcc_cmdline_parser::option::arg_joined |
	  gcc_cmdline_parser::option::arg_separate),
},
{
  .name = "E",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_driver,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "L",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_driver,
  .arg = (gcc_cmdline_parser::option::arg_joined |
	  gcc_cmdline_parser::option::arg_separate),
},
{
  .name = "N",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_driver,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "O",
  .code = opt_code_common_O,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_joined_or_missing,
},
{
  .name = "Ofast",
  .code = opt_code_common_Ofast,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "Og",
  .code = opt_code_common_Og,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "Os",
  .code = opt_code_common_Os,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "Q",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_driver,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "Qn",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_driver,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "Qy",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_driver,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "R",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_driver,
  .arg = (gcc_cmdline_parser::option::arg_joined |
	  gcc_cmdline_parser::option::arg_separate),
},
{
  .name = "S",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_driver,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "T",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_driver,
  .arg = (gcc_cmdline_parser::option::arg_joined |
	  gcc_cmdline_parser::option::arg_separate),
},
{
  .name = "Tbss",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_driver,
  .arg = gcc_cmdline_parser::option::arg_separate,
},
{
  .name = "Tbss=",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_driver,
  .arg = gcc_cmdline_parser::option::arg_joined,
},
{
  .name = "Tdata",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_driver,
  .arg = gcc_cmdline_parser::option::arg_separate,
},
{
  .name = "Tdata=",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_driver,
  .arg = gcc_cmdline_parser::option::arg_joined,
},
{
  .name = "Ttext",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_driver,
  .arg = gcc_cmdline_parser::option::arg_separate,
},
{
  .name = "Ttext=",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_driver,
  .arg = gcc_cmdline_parser::option::arg_joined,
},
{
  .name = "W",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
  .reject_negative = true,
  .alias = { "Wextra" },
},
{
  .name = "Wa,",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_driver,
  .arg = gcc_cmdline_parser::option::arg_joined_or_missing,
  .reject_negative = false,
  .alias = {},
  .negative = nullptr,
  .min_gcc_version = {},
  .max_gcc_version = {7, 4, std::numeric_limits<unsigned int>::max()},
},
{
  .name = "Wa,",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_driver,
  .arg = gcc_cmdline_parser::option::arg_joined_or_missing,
  .reject_negative = true,
  .alias = {},
  .negative = nullptr,
  .min_gcc_version = {8, 1, 0},
},
{
  .name = "Waggregate-return",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "Waggressive-loop-optimizations",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "Warray-bounds",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "Warray-bounds=",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_joined,
  .reject_negative = true,
  .alias = {},
  .negative = nullptr,
  .min_gcc_version = {5, 1, 0},
},
{
  .name = "Wattribute-alias",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
  .reject_negative = false,
  .alias = {},
  .negative = nullptr,
  .min_gcc_version = {8, 1, 0},
},
{
  .name = "Wattributes",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "Wcast-align",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "Wcast-align=strict",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
  .reject_negative = false,
  .alias = {},
  .negative = nullptr,
  .min_gcc_version = {8, 1, 0},
},
{
  .name = "Wcoverage-mismatch",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "Wcpp",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "Wdeprecated-declarations",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "Wdisabled-optimization",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "Werror",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "Werror=",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_joined,
},
{
  .name = "Wextra",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "Wfatal-errors",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "Wframe-larger-than=",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_joined,
  .reject_negative = true,
},
{
  .name = "Wfree-nonheap-object",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "Whsa",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
  .reject_negative = false,
  .alias = {},
  .negative = nullptr,
  .min_gcc_version = {6, 1, 0},
},
{
  .name = "Wimplicit-fallthrough",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
  .reject_negative = false,
  .alias = { "Wimplicit-fallthrough=", "3", "0" },
  .negative = nullptr,
  .min_gcc_version = {7, 1, 0},
},
{
  .name = "Wimplicit-fallthrough=",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_joined,
  .reject_negative = true,
  .alias = {},
  .negative = nullptr,
  .min_gcc_version = {7, 1, 0},
},
{
  .name = "Winline",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "Winvalid-memory-model",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "Wl,",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_driver,
  .arg = gcc_cmdline_parser::option::arg_joined_or_missing,
  .reject_negative = false,
  .alias = {},
  .negative = nullptr,
  .min_gcc_version = {},
  .max_gcc_version = {7, 4, std::numeric_limits<unsigned int>::max()},
},
{
  .name = "Wl,",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_driver,
  .arg = gcc_cmdline_parser::option::arg_joined_or_missing,
  .reject_negative = true,
  .alias = {},
  .negative = nullptr,
  .min_gcc_version = {8, 1, 0},
},
{
  .name = "Wlarger-than-",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_joined,
  .reject_negative = true,
  .alias = { "Wlarger-than=" },
},
{
  .name = "Wlarger-than=",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_joined,
  .reject_negative = true,
},
{
  .name = "Wlto-type-mismatch",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
  .reject_negative = false,
  .alias = {},
  .negative = nullptr,
  .min_gcc_version = {6, 1, 0},
},
{
  .name = "Wmaybe-uninitialized",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "Wmissing-noreturn",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
  .reject_negative = false,
  .alias = { "Wsuggest-attribute=noreturn" },
},
{
  .name = "Wnonnull-compare",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_none,
  .arg = gcc_cmdline_parser::option::arg_none,
  .reject_negative = false,
  .alias = {},
  .negative = nullptr,
  .min_gcc_version = {6, 1, 0},
},
{
  .name = "Wnull-dereference",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
  .reject_negative = false,
  .alias = {},
  .negative = nullptr,
  .min_gcc_version = {6, 1, 0},
},
{
  .name = "Wodr",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
  .reject_negative = false,
  .alias = {},
  .negative = nullptr,
  .min_gcc_version = {5, 1, 0},
},
{
  .name = "Woverflow",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "Wp,",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_driver,
  .arg = gcc_cmdline_parser::option::arg_joined_or_missing,
  .reject_negative = false,
  .alias = {},
  .negative = nullptr,
  .min_gcc_version = {},
  .max_gcc_version = {7, 4, std::numeric_limits<unsigned int>::max()},
},
{
  .name = "Wp,",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_driver,
  .arg = gcc_cmdline_parser::option::arg_joined_or_missing,
  .reject_negative = true,
  .alias = {},
  .negative = nullptr,
  .min_gcc_version = {8, 1, 0},
},
{
  .name = "Wpacked",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "Wpadded",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "Wpedantic",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "Wreturn-local-addr",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
  .reject_negative = false,
  .alias = {},
  .negative = nullptr,
  .min_gcc_version = {5, 1, 0},
},
{
  .name = "Wshadow",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "Wshadow-compatible-local",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
  .reject_negative = false,
  .alias = { "Wshadow=compatible-local" },
  .negative = nullptr,
  .min_gcc_version = {7, 1, 0},
},
{
  .name = "Wshadow-local",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
  .reject_negative = false,
  .alias = { "Wshadow=local" },
  .negative = nullptr,
  .min_gcc_version = {7, 1, 0},
},
{
  .name = "Wshadow=compatible-local",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
  .reject_negative = false,
  .alias = {},
  .negative = nullptr,
  .min_gcc_version = {7, 1, 0},
},
{
  .name = "Wshadow=global",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
  .reject_negative = false,
  .alias = { "Wshadow" },
  .negative = nullptr,
  .min_gcc_version = {7, 1, 0},
},
{
  .name = "Wshadow=local",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
  .reject_negative = false,
  .alias = {},
  .negative = nullptr,
  .min_gcc_version = {7, 1, 0},
},
{
  .name = "Wstack-protector",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "Wstack-usage=",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_joined,
  .reject_negative = true,
},
{
  .name = "Wstrict-aliasing",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "Wstrict-aliasing=",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_joined,
  .reject_negative = true,
},
{
  .name = "Wstrict-overflow",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "Wstrict-overflow=",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_joined,
  .reject_negative = true,
},
{
  .name = "Wsuggest-attribute=cold",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
  .reject_negative = false,
  .alias = {},
  .negative = nullptr,
  .min_gcc_version = {8, 1, 0},
},
{
  .name = "Wsuggest-attribute=const",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "Wsuggest-attribute=malloc",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
  .reject_negative = false,
  .alias = {},
  .negative = nullptr,
  .min_gcc_version = {8, 1, 0},
},
{
  .name = "Wsuggest-attribute=noreturn",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "Wsuggest-attribute=pure",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "Wsuggest-final-methods",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
  .reject_negative = false,
  .alias = {},
  .negative = nullptr,
  .min_gcc_version = {5, 1, 0},
},
{
  .name = "Wsuggest-final-types",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
  .reject_negative = false,
  .alias = {},
  .negative = nullptr,
  .min_gcc_version = {5, 1, 0},
},
{
  .name = "Wswitch-unreachable",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
  .reject_negative = false,
  .alias = {},
  .negative = nullptr,
  .min_gcc_version = {7, 1, 0},
},
{
  .name = "Wsystem-headers",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "Wtrampolines",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "Wtype-limits",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "Wuninitialized",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "Wunreachable-code",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "Wunsafe-loop-optimizations",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "Wunused",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "Wunused-but-set-parameter",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "Wunused-but-set-variable",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "Wunused-function",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "Wunused-label",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "Wunused-parameter",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "Wunused-value",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "Wunused-variable",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "Wvector-operation-performance",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "Xassembler",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_driver,
  .arg = gcc_cmdline_parser::option::arg_separate,
},
{
  .name = "Xlinker",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_driver,
  .arg = gcc_cmdline_parser::option::arg_separate,
},
{
  .name = "Xpreprocessor",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_driver,
  .arg = gcc_cmdline_parser::option::arg_separate,
},
{
  .name = "Z",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_driver,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "aux-info",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_separate,
},
{
  .name = "aux-info=",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_joined,
  .reject_negative = false,
  .alias = { "aux-info" },
},
{
  .name = "auxbase",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_separate,
},
{
  .name = "auxbase-strip",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_separate,
},
{
  .name = "c",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_driver,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "coverage",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_driver,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "d",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_joined,
},
{
  .name = "dumpbase",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_separate,
},
{
  .name = "dumpdir",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_separate,
},
{
  .name = "dumpfullversion",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_driver,
  .arg = gcc_cmdline_parser::option::arg_none,
  .reject_negative = false,
  .alias = {},
  .negative = nullptr,
  .min_gcc_version = {7, 1, 0},
},
{
  .name = "dumpmachine",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_driver,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "dumpspecs",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_driver,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "dumpversion",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_driver,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "e",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_driver,
  .arg = (gcc_cmdline_parser::option::arg_joined |
	  gcc_cmdline_parser::option::arg_separate),
},
{
  .name = "export-dynamic",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_driver,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "fPIC",
  .code = opt_code_common_fPIC,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
  .reject_negative = false,
  .alias = {},
  .negative = "fPIE",
},
{
  .name = "fPIE",
  .code = opt_code_common_fPIE,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
  .reject_negative = false,
  .alias = {},
  .negative = "fpic",
},
{
  .name = "fabi-version=",
  .code = opt_code_common_fabi_version,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_joined,
  .reject_negative = true,
},
{
  .name = "faggressive-loop-optimizations",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "falign-functions",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "falign-functions=",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_joined,
  .reject_negative = true,
},
{
  .name = "falign-jumps",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "falign-jumps=",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_joined,
  .reject_negative = true,
},
{
  .name = "falign-labels",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "falign-labels=",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_joined,
  .reject_negative = true,
},
{
  .name = "falign-loops",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "falign-loops=",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_joined,
  .reject_negative = true,
},
{
  .name = "fargument-alias",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "fargument-noalias",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "fargument-noalias-anything",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "fargument-noalias-global",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "fasan-shadow-offset=",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_joined,
  .reject_negative = true,
  .alias = {},
  .negative = nullptr,
  .min_gcc_version = {5, 1, 0},
},
{
  .name = "fassociative-math",
  .code = opt_code_common_fassociative_math,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "fasynchronous-unwind-tables",
  .code = opt_code_common_fasynchronous_unwind_tables,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "fauto-inc-dec",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "fauto-profile",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
  .reject_negative = false,
  .alias = {},
  .negative = nullptr,
  .min_gcc_version = {5, 1, 0},
},
{
  .name = "fauto-profile=",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_joined,
  .reject_negative = true,
  .alias = {},
  .negative = nullptr,
  .min_gcc_version = {5, 1, 0},
},
{
  .name = "fbounds-check",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "fbranch-count-reg",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "fbranch-probabilities",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "fbranch-target-load-optimize",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "fbranch-target-load-optimize2",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "fbtr-bb-exclusive",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "fcall-saved-",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_joined,
  .reject_negative = true,
},
{
  .name = "fcall-used-",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_joined,
  .reject_negative = true,
},
{
  .name = "fcaller-saves",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "fcf-protection",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
  .reject_negative = true,
  .alias = { "fcf-protection=", "full" },
  .negative = nullptr,
  .min_gcc_version = {8, 1, 0},
},
{
  .name = "fcf-protection=",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_joined,
  .reject_negative = true,
  .alias = {},
  .negative = nullptr,
  .min_gcc_version = {8, 1, 0},
},
{
  .name = "fcheck-data-deps",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "fcheck-new",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
  .reject_negative = false,
  .alias = {},
  .negative = nullptr,
  .min_gcc_version = {4, 9, 0},
},
{
  .name = "fchecking",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
  .reject_negative = false,
  .alias = {},
  .negative = nullptr,
  .min_gcc_version = {6, 1, 0},
},
{
  .name = "fchecking=",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_joined,
  .reject_negative = true,
  .alias = {},
  .negative = nullptr,
  .min_gcc_version = {7, 1, 0},
},
{
  .name = "fcode-hoisting",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
  .reject_negative = false,
  .alias = {},
  .negative = nullptr,
  .min_gcc_version = {7, 1, 0},
},
{
  .name = "fcombine-stack-adjustments",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "fcommon",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "fcompare-debug",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_driver,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "fcompare-debug-second",
  .code = opt_code_common_unused,
  .comp = (gcc_cmdline_parser::option::comp_common |
	   gcc_cmdline_parser::option::comp_driver),
  .arg = gcc_cmdline_parser::option::arg_none,
  .reject_negative = true,
},
{
  .name = "fcompare-debug=",
  .code = opt_code_common_unused,
  .comp = (gcc_cmdline_parser::option::comp_common |
	   gcc_cmdline_parser::option::comp_driver),
  .arg = gcc_cmdline_parser::option::arg_joined_or_missing,
  .reject_negative = true,
},
{
  .name = "fcompare-elim",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "fconserve-stack",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "fcprop-registers",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "fcrossjumping",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "fcse-follow-jumps",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "fcse-skip-blocks",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "fcx-fortran-rules",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "fcx-limited-range",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "fdata-sections",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "fdbg-cnt-list",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "fdbg-cnt=",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_joined,
  .reject_negative = true,
},
{
  .name = "fdce",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "fdebug-prefix-map=",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_joined,
  .reject_negative = true,
},
{
  .name = "fdebug-types-section",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "fdefer-pop",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "fdelayed-branch",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "fdelete-dead-exceptions",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "fdelete-null-pointer-checks",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "fdevirtualize",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "fdevirtualize-at-ltrans",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
  .reject_negative = false,
  .alias = {},
  .negative = nullptr,
  .min_gcc_version = {5, 1, 0},
},
{
  .name = "fdevirtualize-speculatively",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
  .reject_negative = false,
  .alias = {},
  .negative = nullptr,
  .min_gcc_version = {4, 9, 0},
},
{
  .name = "fdiagnostics-color",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
  .reject_negative = false,
  .alias = { "fdiagnostics-color=", "always", "never" },
  .negative = nullptr,
  .min_gcc_version = {4, 9, 0},
},
{
  .name = "fdiagnostics-color=",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_joined,
  .reject_negative = true,
  .alias = {},
  .negative = nullptr,
  .min_gcc_version = {4, 9, 0},
  .max_gcc_version = {4, 9, 4},
},
{
  .name = "fdiagnostics-color=",
  .code = opt_code_common_unused,
  .comp = (gcc_cmdline_parser::option::comp_driver |
	   gcc_cmdline_parser::option::comp_common),
  .arg = gcc_cmdline_parser::option::arg_joined,
  .reject_negative = true,
  .alias = {},
  .negative = nullptr,
  .min_gcc_version = {5, 1, 0},
},
{
  .name = "fdiagnostics-generate-patch",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
  .reject_negative = false,
  .alias = {},
  .negative = nullptr,
  .min_gcc_version = {7, 1, 0},
},
{
  .name = "fdiagnostics-parseable-fixits",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
  .reject_negative = false,
  .alias = {},
  .negative = nullptr,
  .min_gcc_version = {7, 1, 0},
},
{
  .name = "fdiagnostics-show-caret",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "fdiagnostics-show-location=",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_joined,
  .reject_negative = true,
},
{
  .name = "fdiagnostics-show-option",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "fdisable-",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_joined,
  .reject_negative = true,
},
{
  .name = "fdse",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "fdump-",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_joined,
  .reject_negative = true,
},
{
  .name = "fdump-final-insns",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_driver,
  .arg = gcc_cmdline_parser::option::arg_none,
  .reject_negative = true,
},
{
  .name = "fdump-final-insns=",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_joined,
  .reject_negative = true,
},
{
  .name = "fdump-go-spec=",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_joined,
  .reject_negative = true,
},
{
  .name = "fdump-internal-locations",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
  .reject_negative = false,
  .alias = {},
  .negative = nullptr,
  .min_gcc_version = {6, 1, 0},
},
{
  .name = "fdump-noaddr",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "fdump-passes",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "fdump-unnumbered",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "fdump-unnumbered-links",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "fdwarf2-cfi-asm",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "fearly-inlining",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "feliminate-dwarf2-dups",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "feliminate-unused-debug-symbols",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "feliminate-unused-debug-types",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "femit-class-debug-always",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "fenable-",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_joined,
  .reject_negative = true,
},
{
  .name = "fexceptions",
  .code = opt_code_common_fexceptions,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "fexcess-precision=",
  .code = opt_code_common_fexcess_precision,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_joined,
  .reject_negative = true,
},
{
  .name = "fexpensive-optimizations",
  .code = opt_code_common_fexpensive_optimizations,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "ffast-math",
  .code = opt_code_common_ffast_math,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "ffat-lto-objects",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "ffile-prefix-map=",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_joined,
  .reject_negative = true,
  .alias = {},
  .negative = nullptr,
  .min_gcc_version = {8, 1, 0},
},
{
  .name = "ffinite-math-only",
  .code = opt_code_common_ffinite_math_only,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "ffixed-",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_joined,
  .reject_negative = true,
},
{
  .name = "ffloat-store",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "fforce-addr",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "fforward-propagate",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "ffp-contract=",
  .code = opt_code_common_ffp_contract,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_joined,
  .reject_negative = true,
},
{
  .name = "ffp-int-builtin-inexact",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
  .reject_negative = false,
  .alias = {},
  .negative = nullptr,
  .min_gcc_version = {7, 1, 0},
},
{
  .name = "ffunction-cse",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "ffunction-sections",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "fgcse",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "fgcse-after-reload",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "fgcse-las",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "fgcse-lm",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "fgcse-sm",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "fgnat-encodings=",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_joined,
  .reject_negative = true,
  .alias = {},
  .negative = nullptr,
  .min_gcc_version = {6, 1, 0},
},
{
  .name = "fgnu-tm",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "fgnu-unique",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
  .reject_negative = false,
  .alias = {},
  .negative = nullptr,
  .min_gcc_version = {4, 8, 4},
},
{
  .name = "fgraphite",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "fgraphite-identity",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "fguess-branch-probability",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "fhelp",
  .code = opt_code_common_unused,
  .comp = (gcc_cmdline_parser::option::comp_common |
	   gcc_cmdline_parser::option::comp_driver),
  .arg = gcc_cmdline_parser::option::arg_none,
  .reject_negative = false,
  .alias = { "-help" },
},
{
  .name = "fhelp=",
  .code = opt_code_common_unused,
  .comp = (gcc_cmdline_parser::option::comp_common |
	   gcc_cmdline_parser::option::comp_driver),
  .arg = gcc_cmdline_parser::option::arg_joined,
  .reject_negative = false,
  .alias = { "-help=" },
},
{
  .name = "fhoist-adjacent-loads",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "fident",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "fif-conversion",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "fif-conversion2",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "findirect-inlining",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "finhibit-size-directive",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "finline",
  .code = opt_code_common_finline,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "finline-atomics",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "finline-functions",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "finline-functions-called-once",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "finline-limit-",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_joined,
  .reject_negative = true,
  .alias = { "finline-limit=" },
},
{
  .name = "finline-limit=",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_joined,
  .reject_negative = true,
},
{
  .name = "finline-small-functions",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "finstrument-functions",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "finstrument-functions-exclude-file-list=",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_joined,
  .reject_negative = true,
},
{
  .name = "finstrument-functions-exclude-function-list=",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_joined,
  .reject_negative = true,
},
{
  .name = "fipa-bit-cp",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
  .reject_negative = false,
  .alias = {},
  .negative = nullptr,
  .min_gcc_version = {7, 1, 0},
},
{
  .name = "fipa-cp",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "fipa-cp-alignment",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
  .reject_negative = false,
  .alias = {},
  .negative = nullptr,
  .min_gcc_version = {5, 1, 0},
},
{
  .name = "fipa-cp-clone",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "fipa-icf",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
  .reject_negative = false,
  .alias = {},
  .negative = nullptr,
  .min_gcc_version = {5, 1, 0},
},
{
  .name = "fipa-icf-functions",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
  .reject_negative = false,
  .alias = {},
  .negative = nullptr,
  .min_gcc_version = {5, 1, 0},
},
{
  .name = "fipa-icf-variables",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
  .reject_negative = false,
  .alias = {},
  .negative = nullptr,
  .min_gcc_version = {5, 1, 0},
},
{
  .name = "fipa-matrix-reorg",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "fipa-profile",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "fipa-pta",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "fipa-pure-const",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "fipa-ra",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
  .reject_negative = false,
  .alias = {},
  .negative = nullptr,
  .min_gcc_version = {5, 1, 0},
},
{
  .name = "fipa-reference",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "fipa-sra",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "fipa-struct-reorg",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "fipa-vrp",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
  .reject_negative = false,
  .alias = {},
  .negative = nullptr,
  .min_gcc_version = {7, 1, 0},
},
{
  .name = "fira-algorithm=",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_joined,
  .reject_negative = true,
},
{
  .name = "fira-hoist-pressure",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "fira-loop-pressure",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "fira-region=",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_joined,
  .reject_negative = true,
},
{
  .name = "fira-share-save-slots",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "fira-share-spill-slots",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "fira-verbose=",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_joined,
  .reject_negative = true,
},
{
  .name = "fisolate-erroneous-paths-attribute",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
  .reject_negative = false,
  .alias = {},
  .negative = nullptr,
  .min_gcc_version = {4, 9, 0},
},
{
  .name = "fisolate-erroneous-paths-dereference",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
  .reject_negative = false,
  .alias = {},
  .negative = nullptr,
  .min_gcc_version = {4, 9, 0},
},
{
  .name = "fivopts",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "fjump-tables",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "fkeep-gc-roots-live",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
  .reject_negative = false,
  .alias = {},
  .negative = nullptr,
  .min_gcc_version = {6, 1, 0},
},
{
  .name = "fkeep-inline-functions",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "fkeep-static-consts",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "fkeep-static-functions",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
  .reject_negative = false,
  .alias = {},
  .negative = nullptr,
  .min_gcc_version = {6, 1, 0},
},
{
  .name = "fleading-underscore",
  .code = opt_code_common_fleading_underscore,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "flifetime-dse",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
  .reject_negative = false,
  .alias = {},
  .negative = nullptr,
  .min_gcc_version = {4, 9, 3},
},
{
  .name = "flifetime-dse=",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_joined,
  .reject_negative = true,
  .alias = {},
  .negative = nullptr,
  .min_gcc_version = {6, 1, 0},
},
{
  .name = "flimit-function-alignment",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
  .reject_negative = false,
  .alias = {},
  .negative = nullptr,
  .min_gcc_version = {7, 1, 0},
},
{
  .name = "flive-range-shrinkage",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
  .reject_negative = false,
  .alias = {},
  .negative = nullptr,
  .min_gcc_version = {4, 9, 0},
},
{
  .name = "floop-block",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
  .reject_negative = false,
  .alias = {},
  .negative = nullptr,
  .min_gcc_version = {},
  .max_gcc_version = {5, 5, std::numeric_limits<unsigned int>::max()},
},
{
  .name = "floop-block",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
  .reject_negative = false,
  .alias = { "floop-nest-optimize" },
  .negative = nullptr,
  .min_gcc_version = {6, 1, 0},
},
{
  .name = "floop-flatten",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "floop-interchange",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
  .reject_negative = false,
  .alias = {},
  .negative = nullptr,
  .min_gcc_version = {},
  .max_gcc_version = {5, 5, std::numeric_limits<unsigned int>::max()},
},
{
  .name = "floop-interchange",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
  .reject_negative = false,
  .alias = { "floop-nest-optimize" },
  .negative = nullptr,
  .min_gcc_version = {6, 1, 0},
  .max_gcc_version = {7, 4, std::numeric_limits<unsigned int>::max()},
},
{
  .name = "floop-interchange",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
  .reject_negative = false,
  .alias = {},
  .negative = nullptr,
  .min_gcc_version = {8, 1, 0},
},
{
  .name = "floop-nest-optimize",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "floop-optimize",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "floop-parallelize-all",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "floop-strip-mine",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
  .reject_negative = false,
  .alias = {},
  .negative = nullptr,
  .min_gcc_version = {},
  .max_gcc_version = {5, 5, std::numeric_limits<unsigned int>::max()},
},
{
  .name = "floop-strip-mine",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
  .reject_negative = false,
  .alias = { "floop-nest-optimize" },
  .negative = nullptr,
  .min_gcc_version = {6, 1, 0},
},
{
  .name = "floop-unroll-and-jam",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
  .reject_negative = false,
  .alias = {},
  .negative = nullptr,
  .min_gcc_version = {5, 1, 0},
  .max_gcc_version = {5, 5, std::numeric_limits<unsigned int>::max()},
},
{
  .name = "floop-unroll-and-jam",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
  .reject_negative = false,
  .alias = { "floop-nest-optimize" },
  .negative = nullptr,
  .min_gcc_version = {6, 1, 0},
  .max_gcc_version = {7, 4, std::numeric_limits<unsigned int>::max()},
},
{
  .name = "floop-unroll-and-jam",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
  .reject_negative = false,
  .alias = {},
  .negative = nullptr,
  .min_gcc_version = {8, 1, 0},
},
{
  .name = "flra-remat",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
  .reject_negative = false,
  .alias = {},
  .negative = nullptr,
  .min_gcc_version = {5, 1, 0},
},
{
  .name = "flto",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "flto-compression-level=",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_joined,
  .reject_negative = true,
},
{
  .name = "flto-odr-type-merging",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
  .reject_negative = false,
  .alias = {},
  .negative = nullptr,
  .min_gcc_version = {5, 1, 0},
},
{
  .name = "flto-partition=",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_joined,
  .reject_negative = true,
  .alias = {},
  .negative = nullptr,
  .min_gcc_version = {5, 1, 0},
},
{
  .name = "flto-partition=1to1",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
  .reject_negative = false,
  .alias = {},
  .negative = nullptr,
  .min_gcc_version = {},
  .max_gcc_version = {4, 9, 4},
},
{
  .name = "flto-partition=balanced",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
  .reject_negative = false,
  .alias = {},
  .negative = nullptr,
  .min_gcc_version = {},
  .max_gcc_version = {4, 9, 4},
},
{
  .name = "flto-partition=max",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
  .reject_negative = false,
  .alias = {},
  .negative = nullptr,
  .min_gcc_version = {},
  .max_gcc_version = {4, 9, 4},
},
{
  .name = "flto-partition=none",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
  .reject_negative = false,
  .alias = {},
  .negative = nullptr,
  .min_gcc_version = {},
  .max_gcc_version = {4, 9, 4},
},
{
  .name = "flto-report",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "flto-report-wpa",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
  .reject_negative = false,
  .alias = {},
  .negative = nullptr,
  .min_gcc_version = {4, 9, 0},
},
{
  .name = "flto=",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_joined,
  .reject_negative = true,
},
{
  .name = "fmath-errno",
  .code = opt_code_common_fmath_errno,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "fmax-errors=",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_joined,
  .reject_negative = true,
},
{
  .name = "fmem-report",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "fmem-report-wpa",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "fmerge-all-constants",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "fmerge-constants",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "fmerge-debug-strings",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "fmessage-length=",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_joined,
  .reject_negative = true,
},
{
  .name = "fmodulo-sched",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "fmodulo-sched-allow-regmoves",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "fmove-loop-invariants",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "fno-vect-cost-model",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
  .reject_negative = true,
  .alias = { "fvect-cost-model=", "unlimited" },
  .negative = nullptr,
  .min_gcc_version = {4, 9, 0},
  .max_gcc_version = {6, 5, std::numeric_limits<unsigned int>::max()},
},
{
  .name = "fnon-call-exceptions",
  .code = opt_code_common_fnon_call_exceptions,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "foffload-abi=",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_joined,
  .reject_negative = true,
  .alias = {},
  .negative = nullptr,
  .min_gcc_version = {5, 1, 0},
},
{
  .name = "foffload=",
  .code = opt_code_common_unused,
  .comp = (gcc_cmdline_parser::option::comp_common |
	   gcc_cmdline_parser::option::comp_driver),
  .arg = gcc_cmdline_parser::option::arg_joined,
  .reject_negative = false,
  .alias = {},
  .negative = nullptr,
  .min_gcc_version = {5, 1, 0},
},
{
  .name = "fomit-frame-pointer",
  .code = opt_code_common_fomit_frame_pointer,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "fopt-info",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "fopt-info-",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_joined,
  .reject_negative = true,
},
{
  .name = "foptimize-register-move",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "foptimize-sibling-calls",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "foptimize-strlen",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "fpack-struct",
  .code = opt_code_common_fpack_struct,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "fpack-struct=",
  .code = opt_code_common_fpack_struct_,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_joined,
  .reject_negative = true,
},
{
  .name = "fpartial-inlining",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "fpatchable-function-entry=",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_joined,
  .reject_negative = false,
  .alias = {},
  .negative = nullptr,
  .min_gcc_version = {8, 1, 0},
},
{
  .name = "fpcc-struct-return",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "fpeel-loops",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "fpeephole",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "fpeephole2",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "fpermitted-flt-eval-methods=",
  .code = opt_code_common_fpermitted_flt_eval_methods,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_joined,
  .reject_negative = true,
  .alias = {},
  .negative = nullptr,
  .min_gcc_version = {7, 1, 0},
},
{
  .name = "fpic",
  .code = opt_code_common_fpic,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
  .reject_negative = false,
  .alias = {},
  .negative = "fpie",
},
{
  .name = "fpie",
  .code = opt_code_common_fpie,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
  .reject_negative = false,
  .alias = {},
  .negative = "fPIC",
},
{
  .name = "fplt",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
  .reject_negative = false,
  .alias = {},
  .negative = nullptr,
  .min_gcc_version = {6, 1, 0},
},
{
  .name = "fplugin-arg-",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_joined,
  .reject_negative = true,
},
{
  .name = "fplugin=",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_joined,
  .reject_negative = true,
},
{
  .name = "fpost-ipa-mem-report",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "fpre-ipa-mem-report",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "fpredictive-commoning",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "fprefetch-loop-arrays",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "fprofile",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "fprofile-abs-path",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
  .reject_negative = false,
  .alias = {},
  .negative = nullptr,
  .min_gcc_version = {8, 1, 0},
},
{
  .name = "fprofile-arcs",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "fprofile-correction",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "fprofile-dir=",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_joined,
  .reject_negative = true,
},
{
  .name = "fprofile-generate",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "fprofile-generate=",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_joined,
  .reject_negative = true,
},
{
  .name = "fprofile-reorder-functions",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
  .reject_negative = false,
  .alias = {},
  .negative = nullptr,
  .min_gcc_version = {4, 9, 0},
},
{
  .name = "fprofile-report",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "fprofile-update=",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_joined,
  .reject_negative = true,
  .alias = {},
  .negative = nullptr,
  .min_gcc_version = {7, 1, 0},
},
{
  .name = "fprofile-use",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "fprofile-use=",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_joined,
  .reject_negative = true,
},
{
  .name = "fprofile-values",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "frandom-seed",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "frandom-seed=",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_joined,
  .reject_negative = true,
},
{
  .name = "freciprocal-math",
  .code = opt_code_common_freciprocal_math,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "frecord-gcc-switches",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "free",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "freg-struct-return",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "fregmove",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "frename-registers",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "freorder-blocks",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "freorder-blocks-algorithm=",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_joined,
  .reject_negative = true,
  .alias = {},
  .negative = nullptr,
  .min_gcc_version = {6, 1, 0},
},
{
  .name = "freorder-blocks-and-partition",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "freorder-functions",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "freport-bug",
  .code = opt_code_common_unused,
  .comp = (gcc_cmdline_parser::option::comp_common |
	   gcc_cmdline_parser::option::comp_driver),
  .arg = gcc_cmdline_parser::option::arg_none,
  .reject_negative = false,
  .alias = {},
  .negative = nullptr,
  .min_gcc_version = {5, 1, 0},
},
{
  .name = "frerun-cse-after-loop",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "frerun-loop-opt",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "freschedule-modulo-scheduled-loops",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "frounding-math",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "fsanitize-address-use-after-scope",
  .code = opt_code_common_unused,
  .comp = (gcc_cmdline_parser::option::comp_common |
	   gcc_cmdline_parser::option::comp_driver),
  .arg = gcc_cmdline_parser::option::arg_none,
  .reject_negative = false,
  .alias = {},
  .negative = nullptr,
  .min_gcc_version = {7, 1, 0},
},
{
  .name = "fsanitize-coverage=",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_joined,
  .reject_negative = false,
  .alias = {},
  .negative = nullptr,
  .min_gcc_version = {8, 1, 0},
},
{
  .name = "fsanitize-coverage=trace-pc",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
  .reject_negative = false,
  .alias = {},
  .negative = nullptr,
  .min_gcc_version = {6, 1, 0},
  .max_gcc_version = {7, 4, std::numeric_limits<unsigned int>::max()},
},
{
  .name = "fsanitize-recover",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
  .reject_negative = false,
  .alias = {},
  .negative = nullptr,
  .min_gcc_version = {5, 1, 0},
},
{
  .name = "fsanitize-recover=",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_joined,
  .reject_negative = false,
  .alias = {},
  .negative = nullptr,
  .min_gcc_version = {5, 1, 0},
},
{
  .name = "fsanitize-sections=",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_joined,
  .reject_negative = true,
  .alias = {},
  .negative = nullptr,
  .min_gcc_version = {6, 1, 0},
},
{
  .name = "fsanitize-undefined-trap-on-error",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
  .reject_negative = false,
  .alias = {},
  .negative = nullptr,
  .min_gcc_version = {5, 1, 0},
  .max_gcc_version = {5, 1, std::numeric_limits<unsigned int>::max()},
},
{
  .name = "fsanitize-undefined-trap-on-error",
  .code = opt_code_common_unused,
  .comp = (gcc_cmdline_parser::option::comp_common |
	   gcc_cmdline_parser::option::comp_driver),
  .arg = gcc_cmdline_parser::option::arg_none,
  .reject_negative = false,
  .alias = {},
  .negative = nullptr,
  .min_gcc_version = {5, 2, 0},
},
{
  .name = "fsanitize=",
  .code = opt_code_common_fsanitize,
  .comp = (gcc_cmdline_parser::option::comp_common |
	   gcc_cmdline_parser::option::comp_driver),
  .arg = gcc_cmdline_parser::option::arg_joined,
  .reject_negative = false,
  .alias = {},
  .negative = nullptr,
  .min_gcc_version = {4, 9, 0},
},
{
  .name = "fsanitize=address",
  .code = opt_code_common_fsanitize_address,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
  .reject_negative = false,
  .alias = {},
  .negative = nullptr,
  .min_gcc_version = {},
  .max_gcc_version = {4, 8, 5},
},
{
  .name = "fsanitize=thread",
  .code = opt_code_common_fsanitize_thread,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
  .reject_negative = false,
  .alias = {},
  .negative = nullptr,
  .min_gcc_version = {},
  .max_gcc_version = {4, 8, 5},
},
{
  .name = "fsched-critical-path-heuristic",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "fsched-dep-count-heuristic",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "fsched-group-heuristic",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "fsched-interblock",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "fsched-last-insn-heuristic",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "fsched-pressure",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "fsched-rank-heuristic",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "fsched-spec",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "fsched-spec-insn-heuristic",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "fsched-spec-load",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "fsched-spec-load-dangerous",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "fsched-stalled-insns",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "fsched-stalled-insns-dep",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "fsched-stalled-insns-dep=",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_joined,
  .reject_negative = true,
},
{
  .name = "fsched-stalled-insns=",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_joined,
  .reject_negative = true,
},
{
  .name = "fsched-verbose=",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_joined,
  .reject_negative = true,
},
{
  .name = "fsched2-use-superblocks",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "fsched2-use-traces",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "fschedule-fusion",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
  .reject_negative = false,
  .alias = {},
  .negative = nullptr,
  .min_gcc_version = {5, 1, 0},
},
{
  .name = "fschedule-insns",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "fschedule-insns2",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "fsection-anchors",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "fsee",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "fsel-sched-pipelining",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "fsel-sched-pipelining-outer-loops",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "fsel-sched-reschedule-pipelined",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "fselective-scheduling",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "fselective-scheduling2",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "fself-test=",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_joined,
  .reject_negative = false,
  .alias = {},
  .negative = nullptr,
  .min_gcc_version = {7, 1, 0},
},
{
  .name = "fsemantic-interposition",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
  .reject_negative = false,
  .alias = {},
  .negative = nullptr,
  .min_gcc_version = {5, 1, 0},
},
{
  .name = "fshow-column",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "fshrink-wrap",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "fshrink-wrap-separate",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
  .reject_negative = false,
  .alias = {},
  .negative = nullptr,
  .min_gcc_version = {7, 1, 0},
},
{
  .name = "fsignaling-nans",
  .code = opt_code_common_fsignaling_nans,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "fsigned-zeros",
  .code = opt_code_common_fsigned_zeros,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "fsimd-cost-model=",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_joined,
  .reject_negative = true,
  .alias = {},
  .negative = nullptr,
  .min_gcc_version = {4, 9, 0},
},
{
  .name = "fsingle-precision-constant",
  .code = opt_code_common_fsingle_precision_constant,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "fsplit-ivs-in-unroller",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "fsplit-loops",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
  .reject_negative = false,
  .alias = {},
  .negative = nullptr,
  .min_gcc_version = {7, 1, 0},
},
{
  .name = "fsplit-paths",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
  .reject_negative = false,
  .alias = {},
  .negative = nullptr,
  .min_gcc_version = {6, 1, 0},
},
{
  .name = "fsplit-stack",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "fsplit-wide-types",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "fssa-backprop",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
  .reject_negative = false,
  .alias = {},
  .negative = nullptr,
  .min_gcc_version = {6, 1, 0},
},
{
  .name = "fssa-phiopt",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
  .reject_negative = false,
  .alias = {},
  .negative = nullptr,
  .min_gcc_version = {5, 1, 0},
},
{
  .name = "fstack-check",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
  .reject_negative = false,
  .alias = { "fstack-check=", "specific", "no" },
},
{
  .name = "fstack-check=",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_joined,
  .reject_negative = true,
},
{
  .name = "fstack-clash-protection",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
  .reject_negative = false,
  .alias = {},
  .negative = nullptr,
  .min_gcc_version = {8, 1, 0},
},
{
  .name = "fstack-limit",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "fstack-limit-register=",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_joined,
  .reject_negative = true,
},
{
  .name = "fstack-limit-symbol=",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_joined,
  .reject_negative = true,
},
{
  .name = "fstack-protector",
  .code = opt_code_common_fstack_protector,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "fstack-protector-all",
  .code = opt_code_common_fstack_protector_all,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
  .reject_negative = true,
},
{
  .name = "fstack-protector-explicit",
  .code = opt_code_common_fstack_protector_explicit,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
  .reject_negative = true,
  .alias = {},
  .negative = nullptr,
  .min_gcc_version = {5, 1, 0},
},
{
  .name = "fstack-protector-strong",
  .code = opt_code_common_fstack_protector_strong,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
  .reject_negative = true,
  .alias = {},
  .negative = nullptr,
  .min_gcc_version = {4, 9, 0},
},
{
  .name = "fstack-reuse=",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_joined,
  .reject_negative = true,
},
{
  .name = "fstack-usage",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
  .reject_negative = true,
},
{
  .name = "fstdarg-opt",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
  .reject_negative = false,
  .alias = {},
  .negative = nullptr,
  .min_gcc_version = {5, 1, 0},
},
{
  .name = "fstore-merging",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
  .reject_negative = false,
  .alias = {},
  .negative = nullptr,
  .min_gcc_version = {7, 1, 0},
},
{
  .name = "fstrength-reduce",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "fstrict-aliasing",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "fstrict-overflow",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "fstrict-volatile-bitfields",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "fsync-libcalls",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "fsyntax-only",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "ftarget-help",
  .code = opt_code_common_unused,
  .comp = (gcc_cmdline_parser::option::comp_common |
	   gcc_cmdline_parser::option::comp_driver),
  .arg = gcc_cmdline_parser::option::arg_none,
  .reject_negative = false,
  .alias = { "-target-help" },
},
{
  .name = "ftest-coverage",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "fthread-jumps",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "ftime-report",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "ftime-report-details",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
  .reject_negative = false,
  .alias = {},
  .negative = nullptr,
  .min_gcc_version = {7, 1, 0},
},
{
  .name = "ftls-model=",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_joined,
  .reject_negative = true,
},
{
  .name = "ftoplevel-reorder",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "ftracer",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "ftrampolines",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
  .reject_negative = false,
  .alias = {},
  .negative = nullptr,
  .min_gcc_version = {7, 1, 0},
},
{
  .name = "ftrapping-math",
  .code = opt_code_common_ftrapping_math,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "ftrapv",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "ftree-bit-ccp",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "ftree-builtin-call-dce",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "ftree-ccp",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "ftree-ch",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "ftree-coalesce-inlined-vars",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
  .reject_negative = true,
},
{
  .name = "ftree-coalesce-vars",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "ftree-copy-prop",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "ftree-copyrename",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "ftree-cselim",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "ftree-dce",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "ftree-dominator-opts",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "ftree-dse",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "ftree-forwprop",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "ftree-fre",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "ftree-loop-distribute-patterns",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "ftree-loop-distribution",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "ftree-loop-if-convert",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "ftree-loop-if-convert-stores",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "ftree-loop-im",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "ftree-loop-ivcanon",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "ftree-loop-linear",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
  .reject_negative = false,
  .alias = { "floop-interchange" },
  .negative = nullptr,
  .min_gcc_version = {},
  .max_gcc_version = {5, 5, std::numeric_limits<unsigned int>::max()},
},
{
  .name = "ftree-loop-linear",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
  .reject_negative = false,
  .alias = { "floop-nest-optimize" },
  .negative = nullptr,
  .min_gcc_version = {6, 1, 0},
},
{
  .name = "ftree-loop-optimize",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "ftree-loop-vectorize",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
  .reject_negative = false,
  .alias = {},
  .negative = nullptr,
  .min_gcc_version = {4, 9, 0},
},
{
  .name = "ftree-lrs",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "ftree-parallelize-loops=",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_joined,
  .reject_negative = true,
},
{
  .name = "ftree-partial-pre",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "ftree-phiprop",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "ftree-pre",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "ftree-pta",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "ftree-reassoc",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "ftree-salias",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "ftree-scev-cprop",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "ftree-sink",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "ftree-slp-vectorize",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "ftree-slsr",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "ftree-sra",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "ftree-store-ccp",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "ftree-store-copy-prop",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "ftree-switch-conversion",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "ftree-tail-merge",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "ftree-ter",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "ftree-vect-loop-version",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "ftree-vectorize",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "ftree-vectorizer-verbose=",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_joined,
  .reject_negative = true,
},
{
  .name = "ftree-vrp",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "funconstrained-commons",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
  .reject_negative = false,
  .alias = {},
  .negative = nullptr,
  .min_gcc_version = {6, 1, 0},
},
{
  .name = "funit-at-a-time",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "funroll-all-loops",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "funroll-loops",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "funsafe-loop-optimizations",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "funsafe-math-optimizations",
  .code = opt_code_common_funsafe_math_optimizations,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "funswitch-loops",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "funwind-tables",
  .code = opt_code_common_funwind_tables,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "fuse-ld=bfd",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
  .reject_negative = false,
  .alias = {},
  .negative = nullptr,
  .min_gcc_version = {},
  .max_gcc_version = {4, 8, 5},
},
{
  .name = "fuse-ld=bfd",
  .code = opt_code_common_unused,
  .comp = (gcc_cmdline_parser::option::comp_common |
	   gcc_cmdline_parser::option::comp_driver),
  .arg = gcc_cmdline_parser::option::arg_none,
  .reject_negative = false,
  .alias = {},
  .negative = nullptr,
  .min_gcc_version = {4, 9, 0},
},
{
  .name = "fuse-ld=gold",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
  .reject_negative = false,
  .alias = {},
  .negative = nullptr,
  .min_gcc_version = {},
  .max_gcc_version = {4, 8, 5},
},
{
  .name = "fuse-ld=gold",
  .code = opt_code_common_unused,
  .comp = (gcc_cmdline_parser::option::comp_common |
	   gcc_cmdline_parser::option::comp_driver),
  .arg = gcc_cmdline_parser::option::arg_none,
  .reject_negative = false,
  .alias = {},
  .negative = nullptr,
  .min_gcc_version = {4, 9, 0},
},
{
  .name = "fuse-linker-plugin",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "fvar-tracking",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "fvar-tracking-assignments",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "fvar-tracking-assignments-toggle",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "fvar-tracking-uninit",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "fvariable-expansion-in-unroller",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "fvect-cost-model",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
  .reject_negative = false,
  .alias = {},
  .negative = nullptr,
  .min_gcc_version = {},
  .max_gcc_version = {4, 8, 5},
},
{
  .name = "fvect-cost-model",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
  .reject_negative = true,
  .alias = { "fvect-cost-model=", "dynamic" },
  .negative = nullptr,
  .min_gcc_version = {4, 9, 0},
  .max_gcc_version = {6, 5, std::numeric_limits<unsigned int>::max()},
},
{
  .name = "fvect-cost-model",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
  .reject_negative = false,
  .alias = { "fvect-cost-model=", "dynamic", "unlimited" },
  .negative = nullptr,
  .min_gcc_version = {7, 1, 0},
},
{
  .name = "fvect-cost-model=",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_joined,
  .reject_negative = true,
  .alias = {},
  .negative = nullptr,
  .min_gcc_version = {4, 9, 0},
},
{
  .name = "fverbose-asm",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "fversion",
  .code = opt_code_common_unused,
  .comp = (gcc_cmdline_parser::option::comp_common |
	   gcc_cmdline_parser::option::comp_driver),
  .arg = gcc_cmdline_parser::option::arg_none,
  .reject_negative = false,
  .alias = { "-version" },
},
{
  .name = "fvisibility=",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_joined,
  .reject_negative = true,
},
{
  .name = "fvpt",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "fvtable-verify=",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_joined,
  .reject_negative = true,
  .alias = {},
  .negative = nullptr,
  .min_gcc_version = {4, 9, 0},
},
{
  .name = "fvtv-counts",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
  .reject_negative = false,
  .alias = {},
  .negative = nullptr,
  .min_gcc_version = {4, 9, 0},
},
{
  .name = "fvtv-debug",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
  .reject_negative = false,
  .alias = {},
  .negative = nullptr,
  .min_gcc_version = {4, 9, 0},
},
{
  .name = "fweb",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "fwhole-program",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "fwrapv",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "fwrapv-pointer",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
  .reject_negative = false,
  .alias = {},
  .negative = nullptr,
  .min_gcc_version = {8, 1, 0},
},
{
  .name = "fzee",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "fzero-initialized-in-bss",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "g",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_joined_or_missing,
  .reject_negative = false,
  .alias = {},
  .negative = nullptr,
  .min_gcc_version = {},
  .max_gcc_version = {6, 5, std::numeric_limits<unsigned int>::max()},
},
{
  .name = "g",
  .code = opt_code_common_unused,
  .comp = (gcc_cmdline_parser::option::comp_common |
	   gcc_cmdline_parser::option::comp_driver),
  .arg = gcc_cmdline_parser::option::arg_joined_or_missing,
  .reject_negative = false,
  .alias = {},
  .negative = nullptr,
  .min_gcc_version = {7, 1, 0},
  .max_gcc_version = {7, 4, std::numeric_limits<unsigned int>::max()},
},
{
  .name = "g",
  .code = opt_code_common_unused,
  .comp = (gcc_cmdline_parser::option::comp_common |
	   gcc_cmdline_parser::option::comp_driver),
  .arg = gcc_cmdline_parser::option::arg_joined_or_missing,
  .reject_negative = true,
  .alias = {},
  .negative = nullptr,
  .min_gcc_version = {8, 1, 0},
},
{
  .name = "gas-loc-support",
  .code = opt_code_common_unused,
  .comp = (gcc_cmdline_parser::option::comp_common |
	   gcc_cmdline_parser::option::comp_driver),
  .arg = gcc_cmdline_parser::option::arg_none,
  .reject_negative = false,
  .alias = {},
  .negative = nullptr,
  .min_gcc_version = {8, 1, 0},
},
{
  .name = "gas-locview-support",
  .code = opt_code_common_unused,
  .comp = (gcc_cmdline_parser::option::comp_common |
	   gcc_cmdline_parser::option::comp_driver),
  .arg = gcc_cmdline_parser::option::arg_none,
  .reject_negative = false,
  .alias = {},
  .negative = nullptr,
  .min_gcc_version = {8, 1, 0},
},
{
  .name = "gcoff",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_joined_or_missing,
  .reject_negative = false,
  .alias = {},
  .negative = nullptr,
  .min_gcc_version = {},
  .max_gcc_version = {6, 5, std::numeric_limits<unsigned int>::max()},
},
{
  .name = "gcoff",
  .code = opt_code_common_unused,
  .comp = (gcc_cmdline_parser::option::comp_common |
	   gcc_cmdline_parser::option::comp_driver),
  .arg = gcc_cmdline_parser::option::arg_joined_or_missing,
  .reject_negative = false,
  .alias = {},
  .negative = nullptr,
  .min_gcc_version = {7, 1, 0},
  .max_gcc_version = {7, 4, std::numeric_limits<unsigned int>::max()},
},
{
  .name = "gcoff",
  .code = opt_code_common_unused,
  .comp = (gcc_cmdline_parser::option::comp_common |
	   gcc_cmdline_parser::option::comp_driver),
  .arg = gcc_cmdline_parser::option::arg_none,
  .reject_negative = false,
  .alias = {},
  .negative = nullptr,
  .min_gcc_version = {8, 1, 0},
},
{
  .name = "gcoff1",
  .code = opt_code_common_unused,
  .comp = (gcc_cmdline_parser::option::comp_common |
	   gcc_cmdline_parser::option::comp_driver),
  .arg = gcc_cmdline_parser::option::arg_none,
  .reject_negative = false,
  .alias = {},
  .negative = nullptr,
  .min_gcc_version = {8, 1, 0},
},
{
  .name = "gcoff2",
  .code = opt_code_common_unused,
  .comp = (gcc_cmdline_parser::option::comp_common |
	   gcc_cmdline_parser::option::comp_driver),
  .arg = gcc_cmdline_parser::option::arg_none,
  .reject_negative = false,
  .alias = {},
  .negative = nullptr,
  .min_gcc_version = {8, 1, 0},
},
{
  .name = "gcoff3",
  .code = opt_code_common_unused,
  .comp = (gcc_cmdline_parser::option::comp_common |
	   gcc_cmdline_parser::option::comp_driver),
  .arg = gcc_cmdline_parser::option::arg_none,
  .reject_negative = false,
  .alias = {},
  .negative = nullptr,
  .min_gcc_version = {8, 1, 0},
},
{
  .name = "gcolumn-info",
  .code = opt_code_common_unused,
  .comp = (gcc_cmdline_parser::option::comp_common |
	   gcc_cmdline_parser::option::comp_driver),
  .arg = gcc_cmdline_parser::option::arg_none,
  .reject_negative = true,
  .alias = {},
  .negative = nullptr,
  .min_gcc_version = {7, 1, 0},
  .max_gcc_version = {7, 4, std::numeric_limits<unsigned int>::max()},
},
{
  .name = "gcolumn-info",
  .code = opt_code_common_unused,
  .comp = (gcc_cmdline_parser::option::comp_common |
	   gcc_cmdline_parser::option::comp_driver),
  .arg = gcc_cmdline_parser::option::arg_none,
  .reject_negative = false,
  .alias = {},
  .negative = nullptr,
  .min_gcc_version = {8, 1, 0},
},
{
  .name = "gdwarf",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_joined_or_missing,
  .reject_negative = false,
  .alias = {},
  .negative = nullptr,
  .min_gcc_version = {4, 9, 0},
  .max_gcc_version = {6, 5, std::numeric_limits<unsigned int>::max()},
},
{
  .name = "gdwarf",
  .code = opt_code_common_unused,
  .comp = (gcc_cmdline_parser::option::comp_common |
	   gcc_cmdline_parser::option::comp_driver),
  .arg = gcc_cmdline_parser::option::arg_joined_or_missing,
  .reject_negative = false,
  .alias = {},
  .negative = nullptr,
  .min_gcc_version = {7, 1, 0},
},
{
  .name = "gdwarf-",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_joined,
  .reject_negative = false,
  .alias = {},
  .negative = nullptr,
  .min_gcc_version = {},
  .max_gcc_version = {6, 5, std::numeric_limits<unsigned int>::max()},
},
{
  .name = "gdwarf-",
  .code = opt_code_common_unused,
  .comp = (gcc_cmdline_parser::option::comp_common |
	   gcc_cmdline_parser::option::comp_driver),
  .arg = gcc_cmdline_parser::option::arg_joined,
  .reject_negative = false,
  .alias = {},
  .negative = nullptr,
  .min_gcc_version = {7, 1, 0},
},
{
  .name = "ggdb",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_joined_or_missing,
  .reject_negative = false,
  .alias = {},
  .negative = nullptr,
  .min_gcc_version = {},
  .max_gcc_version = {6, 5, std::numeric_limits<unsigned int>::max()},
},
{
  .name = "ggdb",
  .code = opt_code_common_unused,
  .comp = (gcc_cmdline_parser::option::comp_common |
	   gcc_cmdline_parser::option::comp_driver),
  .arg = gcc_cmdline_parser::option::arg_joined_or_missing,
  .reject_negative = false,
  .alias = {},
  .negative = nullptr,
  .min_gcc_version = {7, 1, 0},
},
{
  .name = "ggnu-pubnames",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
  .reject_negative = false,
  .alias = {},
  .negative = nullptr,
  .min_gcc_version = {4, 9, 0},
  .max_gcc_version = {6, 5, std::numeric_limits<unsigned int>::max()},
},
{
  .name = "ggnu-pubnames",
  .code = opt_code_common_unused,
  .comp = (gcc_cmdline_parser::option::comp_common |
	   gcc_cmdline_parser::option::comp_driver),
  .arg = gcc_cmdline_parser::option::arg_none,
  .reject_negative = false,
  .alias = {},
  .negative = nullptr,
  .min_gcc_version = {7, 1, 0},
},
{
  .name = "ginline-points",
  .code = opt_code_common_unused,
  .comp = (gcc_cmdline_parser::option::comp_common |
	   gcc_cmdline_parser::option::comp_driver),
  .arg = gcc_cmdline_parser::option::arg_none,
  .reject_negative = false,
  .alias = {},
  .negative = nullptr,
  .min_gcc_version = {8, 1, 0},
},
{
  .name = "ginternal-reset-location-views",
  .code = opt_code_common_unused,
  .comp = (gcc_cmdline_parser::option::comp_common |
	   gcc_cmdline_parser::option::comp_driver),
  .arg = gcc_cmdline_parser::option::arg_none,
  .reject_negative = false,
  .alias = {},
  .negative = nullptr,
  .min_gcc_version = {8, 1, 0},
},
{
  .name = "gno-",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_none,
  .arg = gcc_cmdline_parser::option::arg_joined,
  .reject_negative = true,
  .alias = {},
  .negative = nullptr,
  .min_gcc_version = {8, 1, 0},
},
{
  .name = "gno-column-info",
  .code = opt_code_common_unused,
  .comp = (gcc_cmdline_parser::option::comp_common |
	   gcc_cmdline_parser::option::comp_driver),
  .arg = gcc_cmdline_parser::option::arg_none,
  .reject_negative = true,
  .alias = {},
  .negative = nullptr,
  .min_gcc_version = {7, 1, 0},
  .max_gcc_version = {7, 4, std::numeric_limits<unsigned int>::max()},
},
{
  .name = "gno-pubnames",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
  .reject_negative = true,
  .alias = {},
  .negative = nullptr,
  .min_gcc_version = {},
  .max_gcc_version = {4, 8, 5},
},
{
  .name = "gno-pubnames",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
  .reject_negative = false,
  .alias = {},
  .negative = nullptr,
  .min_gcc_version = {4, 9, 0},
  .max_gcc_version = {6, 5, std::numeric_limits<unsigned int>::max()},
},
{
  .name = "gno-pubnames",
  .code = opt_code_common_unused,
  .comp = (gcc_cmdline_parser::option::comp_common |
	   gcc_cmdline_parser::option::comp_driver),
  .arg = gcc_cmdline_parser::option::arg_none,
  .reject_negative = false,
  .alias = {},
  .negative = nullptr,
  .min_gcc_version = {7, 1, 0},
},
{
  .name = "gno-record-gcc-switches",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
  .reject_negative = true,
  .alias = {},
  .negative = nullptr,
  .min_gcc_version = {},
  .max_gcc_version = {6, 5, std::numeric_limits<unsigned int>::max()},
},
{
  .name = "gno-record-gcc-switches",
  .code = opt_code_common_unused,
  .comp = (gcc_cmdline_parser::option::comp_common |
	   gcc_cmdline_parser::option::comp_driver),
  .arg = gcc_cmdline_parser::option::arg_none,
  .reject_negative = false,
  .alias = {},
  .negative = nullptr,
  .min_gcc_version = {7, 1, 0},
  .max_gcc_version = {7, 4, std::numeric_limits<unsigned int>::max()},
},
{
  .name = "gno-split-dwarf",
  .code = opt_code_common_unused,
  .comp = (gcc_cmdline_parser::option::comp_common |
	   gcc_cmdline_parser::option::comp_driver),
  .arg = gcc_cmdline_parser::option::arg_none,
  .reject_negative = true,
  .alias = {},
  .negative = nullptr,
  .min_gcc_version = {},
  .max_gcc_version = {7, 4, std::numeric_limits<unsigned int>::max()},
},
{
  .name = "gno-strict-dwarf",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
  .reject_negative = true,
  .alias = {},
  .negative = nullptr,
  .min_gcc_version = {},
  .max_gcc_version = {6, 5, std::numeric_limits<unsigned int>::max()},
},
{
  .name = "gno-strict-dwarf",
  .code = opt_code_common_unused,
  .comp = (gcc_cmdline_parser::option::comp_common |
	   gcc_cmdline_parser::option::comp_driver),
  .arg = gcc_cmdline_parser::option::arg_none,
  .reject_negative = false,
  .alias = {},
  .negative = nullptr,
  .min_gcc_version = {7, 1, 0},
  .max_gcc_version = {7, 4, std::numeric_limits<unsigned int>::max()},
},
{
  .name = "gpubnames",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
  .reject_negative = true,
  .alias = {},
  .negative = nullptr,
  .min_gcc_version = {},
  .max_gcc_version = {4, 8, 5},
},
{
  .name = "gpubnames",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
  .reject_negative = false,
  .alias = {},
  .negative = nullptr,
  .min_gcc_version = {4, 9, 0},
  .max_gcc_version = {6, 5, std::numeric_limits<unsigned int>::max()},
},
{
  .name = "gpubnames",
  .code = opt_code_common_unused,
  .comp = (gcc_cmdline_parser::option::comp_common |
	   gcc_cmdline_parser::option::comp_driver),
  .arg = gcc_cmdline_parser::option::arg_none,
  .reject_negative = false,
  .alias = {},
  .negative = nullptr,
  .min_gcc_version = {7, 1, 0},
},
{
  .name = "grecord-gcc-switches",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
  .reject_negative = true,
  .alias = {},
  .negative = nullptr,
  .min_gcc_version = {},
  .max_gcc_version = {6, 5, std::numeric_limits<unsigned int>::max()},
},
{
  .name = "grecord-gcc-switches",
  .code = opt_code_common_unused,
  .comp = (gcc_cmdline_parser::option::comp_common |
	   gcc_cmdline_parser::option::comp_driver),
  .arg = gcc_cmdline_parser::option::arg_none,
  .reject_negative = true,
  .alias = {},
  .negative = nullptr,
  .min_gcc_version = {7, 1, 0},
},
{
  .name = "gsplit-dwarf",
  .code = opt_code_common_unused,
  .comp = (gcc_cmdline_parser::option::comp_common |
	   gcc_cmdline_parser::option::comp_driver),
  .arg = gcc_cmdline_parser::option::arg_none,
  .reject_negative = true,
  .alias = {},
  .negative = nullptr,
  .min_gcc_version = {},
  .max_gcc_version = {7, 4, std::numeric_limits<unsigned int>::max()},
},
{
  .name = "gsplit-dwarf",
  .code = opt_code_common_unused,
  .comp = (gcc_cmdline_parser::option::comp_common |
	   gcc_cmdline_parser::option::comp_driver),
  .arg = gcc_cmdline_parser::option::arg_none,
  .reject_negative = false,
  .alias = {},
  .negative = nullptr,
  .min_gcc_version = {8, 1, 0},
},
{
  .name = "gstabs",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_joined_or_missing,
  .reject_negative = false,
  .alias = {},
  .negative = nullptr,
  .min_gcc_version = {},
  .max_gcc_version = {6, 5, std::numeric_limits<unsigned int>::max()},
},
{
  .name = "gstabs",
  .code = opt_code_common_unused,
  .comp = (gcc_cmdline_parser::option::comp_common |
	   gcc_cmdline_parser::option::comp_driver),
  .arg = gcc_cmdline_parser::option::arg_joined_or_missing,
  .reject_negative = false,
  .alias = {},
  .negative = nullptr,
  .min_gcc_version = {7, 1, 0},
},
{
  .name = "gstabs+",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_joined_or_missing,
  .reject_negative = false,
  .alias = {},
  .negative = nullptr,
  .min_gcc_version = {},
  .max_gcc_version = {6, 5, std::numeric_limits<unsigned int>::max()},
},
{
  .name = "gstabs+",
  .code = opt_code_common_unused,
  .comp = (gcc_cmdline_parser::option::comp_common |
	   gcc_cmdline_parser::option::comp_driver),
  .arg = gcc_cmdline_parser::option::arg_joined_or_missing,
  .reject_negative = false,
  .alias = {},
  .negative = nullptr,
  .min_gcc_version = {7, 1, 0},
},
{
  .name = "gstatement-frontiers",
  .code = opt_code_common_unused,
  .comp = (gcc_cmdline_parser::option::comp_common |
	   gcc_cmdline_parser::option::comp_driver),
  .arg = gcc_cmdline_parser::option::arg_none,
  .reject_negative = false,
  .alias = {},
  .negative = nullptr,
  .min_gcc_version = {8, 1, 0},
},
{
  .name = "gstrict-dwarf",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
  .reject_negative = true,
  .alias = {},
  .negative = nullptr,
  .min_gcc_version = {},
  .max_gcc_version = {6, 5, std::numeric_limits<unsigned int>::max()},
},
{
  .name = "gstrict-dwarf",
  .code = opt_code_common_unused,
  .comp = (gcc_cmdline_parser::option::comp_common |
	   gcc_cmdline_parser::option::comp_driver),
  .arg = gcc_cmdline_parser::option::arg_none,
  .reject_negative = true,
  .alias = {},
  .negative = nullptr,
  .min_gcc_version = {7, 1, 0},
  .max_gcc_version = {7, 4, std::numeric_limits<unsigned int>::max()},
},
{
  .name = "gstrict-dwarf",
  .code = opt_code_common_unused,
  .comp = (gcc_cmdline_parser::option::comp_common |
	   gcc_cmdline_parser::option::comp_driver),
  .arg = gcc_cmdline_parser::option::arg_none,
  .reject_negative = false,
  .alias = {},
  .negative = nullptr,
  .min_gcc_version = {8, 1, 0},
},
{
  .name = "gtoggle",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
  .reject_negative = false,
  .alias = {},
  .negative = nullptr,
  .min_gcc_version = {},
  .max_gcc_version = {6, 5, std::numeric_limits<unsigned int>::max()},
},
{
  .name = "gtoggle",
  .code = opt_code_common_unused,
  .comp = (gcc_cmdline_parser::option::comp_common |
	   gcc_cmdline_parser::option::comp_driver),
  .arg = gcc_cmdline_parser::option::arg_none,
  .reject_negative = false,
  .alias = {},
  .negative = nullptr,
  .min_gcc_version = {7, 1, 0},
},
{
  .name = "gvariable-location-views",
  .code = opt_code_common_unused,
  .comp = (gcc_cmdline_parser::option::comp_common |
	   gcc_cmdline_parser::option::comp_driver),
  .arg = gcc_cmdline_parser::option::arg_none,
  .reject_negative = false,
  .alias = {},
  .negative = nullptr,
  .min_gcc_version = {8, 1, 0},
},
{
  .name = "gvariable-location-views=incompat5",
  .code = opt_code_common_unused,
  .comp = (gcc_cmdline_parser::option::comp_common |
	   gcc_cmdline_parser::option::comp_driver),
  .arg = gcc_cmdline_parser::option::arg_none,
  .reject_negative = true,
  .alias = {},
  .negative = nullptr,
  .min_gcc_version = {8, 1, 0},
},
{
  .name = "gvms",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_joined_or_missing,
  .reject_negative = false,
  .alias = {},
  .negative = nullptr,
  .min_gcc_version = {},
  .max_gcc_version = {6, 5, std::numeric_limits<unsigned int>::max()},
},
{
  .name = "gvms",
  .code = opt_code_common_unused,
  .comp = (gcc_cmdline_parser::option::comp_common |
	   gcc_cmdline_parser::option::comp_driver),
  .arg = gcc_cmdline_parser::option::arg_joined_or_missing,
  .reject_negative = false,
  .alias = {},
  .negative = nullptr,
  .min_gcc_version = {7, 1, 0},
},
{
  .name = "gxcoff",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_joined_or_missing,
  .reject_negative = false,
  .alias = {},
  .negative = nullptr,
  .min_gcc_version = {},
  .max_gcc_version = {6, 5, std::numeric_limits<unsigned int>::max()},
},
{
  .name = "gxcoff",
  .code = opt_code_common_unused,
  .comp = (gcc_cmdline_parser::option::comp_common |
	   gcc_cmdline_parser::option::comp_driver),
  .arg = gcc_cmdline_parser::option::arg_joined_or_missing,
  .reject_negative = false,
  .alias = {},
  .negative = nullptr,
  .min_gcc_version = {7, 1, 0},
},
{
  .name = "gxcoff+",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_joined_or_missing,
  .reject_negative = false,
  .alias = {},
  .negative = nullptr,
  .min_gcc_version = {},
  .max_gcc_version = {6, 5, std::numeric_limits<unsigned int>::max()},
},
{
  .name = "gxcoff+",
  .code = opt_code_common_unused,
  .comp = (gcc_cmdline_parser::option::comp_common |
	   gcc_cmdline_parser::option::comp_driver),
  .arg = gcc_cmdline_parser::option::arg_joined_or_missing,
  .reject_negative = false,
  .alias = {},
  .negative = nullptr,
  .min_gcc_version = {7, 1, 0},
},
{
  .name = "gz",
  .code = opt_code_common_unused,
  .comp = (gcc_cmdline_parser::option::comp_common |
	   gcc_cmdline_parser::option::comp_driver),
  .arg = gcc_cmdline_parser::option::arg_none,
  .reject_negative = false,
  .alias = {},
  .negative = nullptr,
  .min_gcc_version = {5, 1, 0},
},
{
  .name = "gz=",
  .code = opt_code_common_unused,
  .comp = (gcc_cmdline_parser::option::comp_common |
	   gcc_cmdline_parser::option::comp_driver),
  .arg = gcc_cmdline_parser::option::arg_joined,
  .reject_negative = false,
  .alias = {},
  .negative = nullptr,
  .min_gcc_version = {5, 1, 0},
  .max_gcc_version = {7, 4, std::numeric_limits<unsigned int>::max()},
},
{
  .name = "gz=",
  .code = opt_code_common_unused,
  .comp = (gcc_cmdline_parser::option::comp_common |
	   gcc_cmdline_parser::option::comp_driver),
  .arg = gcc_cmdline_parser::option::arg_joined,
  .reject_negative = true,
  .alias = {},
  .negative = nullptr,
  .min_gcc_version = {8, 1, 0},
},
{
  .name = "h",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_driver,
  .arg = (gcc_cmdline_parser::option::arg_joined |
	  gcc_cmdline_parser::option::arg_separate),
},
{
  .name = "imultiarch",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = (gcc_cmdline_parser::option::arg_joined |
	  gcc_cmdline_parser::option::arg_separate),
},
{
  .name = "iplugindir=",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_joined,
},
{
  .name = "l",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_driver,
  .arg = (gcc_cmdline_parser::option::arg_joined |
	  gcc_cmdline_parser::option::arg_separate),
},
{
  .name = "n",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_driver,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "no-canonical-prefixes",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_driver,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "no-pie",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_driver,
  .arg = gcc_cmdline_parser::option::arg_none,
  .reject_negative = true,
  .alias = {},
  .negative = nullptr,
  .min_gcc_version = {6, 1, 0},
},
{
  .name = "nodefaultlibs",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_driver,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "nostartfiles",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_driver,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "nostdlib",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_driver,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "o",
  .code = opt_code_common_unused,
  .comp = (gcc_cmdline_parser::option::comp_common |
	   gcc_cmdline_parser::option::comp_driver),
  .arg = (gcc_cmdline_parser::option::arg_joined |
	  gcc_cmdline_parser::option::arg_separate),
},
{
  .name = "p",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "pass-exit-codes",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_driver,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "pedantic",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
  .reject_negative = false,
  .alias = { "Wpedantic" },
},
{
  .name = "pedantic-errors",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "pg",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_driver,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "pie",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_driver,
  .arg = gcc_cmdline_parser::option::arg_none,
  .reject_negative = true,
},
{
  .name = "pipe",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_driver,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "print-file-name=",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_driver,
  .arg = gcc_cmdline_parser::option::arg_joined_or_missing,
},
{
  .name = "print-libgcc-file-name",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_driver,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "print-multi-directory",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_driver,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "print-multi-lib",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_driver,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "print-multi-os-directory",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_driver,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "print-multiarch",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_driver,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "print-prog-name=",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_driver,
  .arg = gcc_cmdline_parser::option::arg_joined_or_missing,
},
{
  .name = "print-search-dirs",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_driver,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "print-sysroot",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_driver,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "print-sysroot-headers-suffix",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_driver,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "quiet",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "r",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_driver,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "s",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_driver,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "save-temps",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_driver,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "save-temps=",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_driver,
  .arg = gcc_cmdline_parser::option::arg_joined,
},
{
  .name = "shared",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_driver,
  .arg = gcc_cmdline_parser::option::arg_none,
  .reject_negative = true,
},
{
  .name = "shared-libgcc",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_driver,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "specs",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_driver,
  .arg = gcc_cmdline_parser::option::arg_separate,
  .reject_negative = false,
  .alias = { "specs=" },
},
{
  .name = "specs=",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_driver,
  .arg = gcc_cmdline_parser::option::arg_joined,
},
{
  .name = "static",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_driver,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "static-libasan",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_driver,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "static-libgcc",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_driver,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "static-libgfortran",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_driver,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "static-libgo",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_driver,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "static-liblsan",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_driver,
  .arg = gcc_cmdline_parser::option::arg_none,
  .reject_negative = false,
  .alias = {},
  .negative = nullptr,
  .min_gcc_version = {4, 9, 0},
},
{
  .name = "static-libstdc++",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_driver,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "static-libtsan",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_driver,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "static-libubsan",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_driver,
  .arg = gcc_cmdline_parser::option::arg_none,
  .reject_negative = false,
  .alias = {},
  .negative = nullptr,
  .min_gcc_version = {4, 9, 0},
},
{
  .name = "static-pie",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_driver,
  .arg = gcc_cmdline_parser::option::arg_none,
  .reject_negative = true,
  .alias = {},
  .negative = nullptr,
  .min_gcc_version = {8, 1, 0},
},
{
  .name = "symbolic",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_driver,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "t",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_driver,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "time",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_driver,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "time=",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_driver,
  .arg = gcc_cmdline_parser::option::arg_joined_or_missing,
},
{
  .name = "u",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_driver,
  .arg = (gcc_cmdline_parser::option::arg_joined |
	  gcc_cmdline_parser::option::arg_separate),
},
{
  .name = "undef",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_driver,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "v",
  .code = opt_code_common_unused,
  .comp = (gcc_cmdline_parser::option::comp_common |
	   gcc_cmdline_parser::option::comp_driver),
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "version",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "w",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_common,
  .arg = gcc_cmdline_parser::option::arg_none,
},
{
  .name = "wrapper",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_driver,
  .arg = gcc_cmdline_parser::option::arg_separate,
},
{
  .name = "x",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_driver,
  .arg = (gcc_cmdline_parser::option::arg_joined |
	  gcc_cmdline_parser::option::arg_separate),
},
{
  .name = "z",
  .code = opt_code_common_unused,
  .comp = gcc_cmdline_parser::option::comp_driver,
  .arg = (gcc_cmdline_parser::option::arg_joined |
	  gcc_cmdline_parser::option::arg_separate),
},
